[
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "Methods",
    "section": "",
    "text": "We employed two Gene Fusions(GFs) detection tools, including arriba, STAR-Fusion, to identify, parse, and annotate GFs junctions within each sample, using the human genome version hg38 as the reference. In our pursuit of biologically robust GFs identification within each cohort, we undertook an approach metafusion that amalgamated results from two GFs detection tools. Firstly, we exclusively retained Fusions located on chromosomes 1 to 22, as well as the X and Y chromosomes. Secondly, GFs were mandated to exhibit genomic overlap with gene regions as defined in the reference genome annotation file, specifically “gencode.v34.annotation.gtf.”. Thirdly to ensure the precision and recall in GFs prediction with different tools, one can either rely on consensus predictions or all predctions and choosing junction-crossing reads and reads mates which flank (span) the breakpoint. Fourthly, we offer FusionAnnotator to identify and prioritize GFs that have been previously reported in cancer or normal samples. Lastly, the detected data can be divided into Cis-SAGes and other categories to further explore the debate on what should be considered true fusion RNAs. This meticulous methodological approach was instrumental in ensuring the acquisition of biologically sound and reliable GFs datasets, thereby fortifying the integrity of our analysis within each cohort. This analysis facilitated comparisons between patient groups, such as those who responded to checkpoint immunotherapy versus non-responders, as well as between samples collected before and during ICB treatment."
  },
  {
    "objectID": "methods.html#gene-fusions-identification-and-differential-expression-analysis",
    "href": "methods.html#gene-fusions-identification-and-differential-expression-analysis",
    "title": "Methods",
    "section": "",
    "text": "We employed two Gene Fusions(GFs) detection tools, including arriba, STAR-Fusion, to identify, parse, and annotate GFs junctions within each sample, using the human genome version hg38 as the reference. In our pursuit of biologically robust GFs identification within each cohort, we undertook an approach metafusion that amalgamated results from two GFs detection tools. Firstly, we exclusively retained Fusions located on chromosomes 1 to 22, as well as the X and Y chromosomes. Secondly, GFs were mandated to exhibit genomic overlap with gene regions as defined in the reference genome annotation file, specifically “gencode.v34.annotation.gtf.”. Thirdly to ensure the precision and recall in GFs prediction with different tools, one can either rely on consensus predictions or all predctions and choosing junction-crossing reads and reads mates which flank (span) the breakpoint. Fourthly, we offer FusionAnnotator to identify and prioritize GFs that have been previously reported in cancer or normal samples. Lastly, the detected data can be divided into Cis-SAGes and other categories to further explore the debate on what should be considered true fusion RNAs. This meticulous methodological approach was instrumental in ensuring the acquisition of biologically sound and reliable GFs datasets, thereby fortifying the integrity of our analysis within each cohort. This analysis facilitated comparisons between patient groups, such as those who responded to checkpoint immunotherapy versus non-responders, as well as between samples collected before and during ICB treatment."
  },
  {
    "objectID": "methods.html#response-and-response2",
    "href": "methods.html#response-and-response2",
    "title": "Methods",
    "section": "Response and Response2",
    "text": "Response and Response2\nWe gathered and processed patient ‘Response’ data from various cohorts. However, due to inconsistencies among these cohorts, such as the usage of different terms like CR, PR, SD, PD, R, NR, DCB, and NDB, we harmonized the response variable based on the timing of treatment and treatment response. As a result, we introduced a new variable called ‘Response2’ with four distinct categories: Pre-R, Pre-NR, On-R, and On-NR. In cases where response data was not available, we assigned the category NE."
  },
  {
    "objectID": "methods.html#cancer-type-abbreviation",
    "href": "methods.html#cancer-type-abbreviation",
    "title": "Methods",
    "section": "Cancer Type Abbreviation",
    "text": "Cancer Type Abbreviation\n\n\n\n\n\n\n\nAbbr.\nDescription\n\n\n\n\nBLCA\nBladder urothelial carcinoma\n\n\nSKCM\nSkin cutaneous melanoma\n\n\nKIRC & CCRCC\nKidney renal clear cell carcinoma\n\n\nHNSC & HNSCC\nHead and neck squamous cell carcinoma\n\n\nNSCLC\nNon-small cell lung cancer, including lung adenocarcinoma and lung squamous cell carcinoma\n\n\nSCLC\nSmall cell lung cancer\n\n\nSARC\nSarcoma\n\n\nBRCA\nBreast cancer\n\n\nGBM\nGlioblastoma Multiforme\n\n\nSTAD\nStomach Adenocarcinoma\n\n\nSGC\nSalivary gland cancer\n\n\nLUSC\nLung Squamous Cell Carcinoma\n\n\nMESO\nMesothelioma\n\n\nPCPG\nPheochromocytoma and Paraganglioma\n\n\nLIHC\nLiver Hepatocellular Carcinoma\n\n\nPRAD\nProstate Adenocarcinoma\n\n\nACC\nAdrenocortical Carcinoma\n\n\nTGCT\nTesticular Germ Cell Tumors\n\n\nPAAD\nPancreatic Adenocarcinoma\n\n\nUCEC\nUterine Corpus Endometrial Carcinoma\n\n\nTHCA\nThyroid carcinoma\n\n\nCESC\nCervical squamous cell carcinoma and endocervical adenocarcinoma\n\n\nESCA\nEsophageal carcinoma\n\n\nREAD\nRectum adenocarcinoma\n\n\nOV\nOvarian Serous Cystadenocarcinoma\n\n\nCHOL\nCholangiocarcinoma\n\n\nUCS\nUterine Carcinosarcoma\n\n\nLUAD\nLung Adenocarcinoma\n\n\nLGG\nBrain Lower Grade Glioma\n\n\nHGSC\nHigh-Grade Serous Carcinoma\n\n\nLSCC & LUSC\nLung Squamous Cell Carcinoma\n\n\nPDAC\nPancreatic Ductal Adenocarcinoma\n\n\nTHYM\nThymoma\n\n\nKICH\nKidney Chromophobe\n\n\nKIRP\nKidney Renal Papillary Cell Carcinoma\n\n\nCOAD\nColon Adenocarcinoma\n\n\nLAML & AML\nAcute Myeloid Leukemia\n\n\nNBL\nNeuroblastoma\n\n\nGNB\nGanglioneuroblastoma"
  },
  {
    "objectID": "methods.html#immunofusion-cohort-naming-maping",
    "href": "methods.html#immunofusion-cohort-naming-maping",
    "title": "Methods",
    "section": "ImmunoFusion cohort naming maping",
    "text": "ImmunoFusion cohort naming maping\n\n\n\n\n\n\n\n\n\nCancer\nSample_type\nProject_id\nImmunofusion-cohort\n\n\n\n\nBRCA\nPrimary Tumor\nCPTAC-2\nCPTAC-BRCA\n\n\nCOAD\nPrimary Tumor\nCPTAC-2\nCPTAC-COAD\n\n\nHGSC\nPrimary Tumor\nCPTAC-2\nCPTAC-HGSC\n\n\nLSCC\nPrimary Tumor\nCPTAC-3\nCPTAC-LUSC\n\n\nUCEC\nPrimary Tumor\nCPTAC-3\nCPTAC-UCEC\n\n\nLUAD\nPrimary Tumor\nCPTAC-3\nCPTAC-LUAD\n\n\nGBM\nPrimary Tumor\nCPTAC-3\nCPTAC-GBM\n\n\nHNSCC\nPrimary Tumor\nCPTAC-3\nCPTAC-HNSC\n\n\nCCRCC\nPrimary Tumor\nCPTAC-3\nCPTAC-KIRC\n\n\nPDAC\nPrimary Tumor\nCPTAC-3\nCPTAC-PDAC\n\n\nPDAC\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\nLUAD\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\nUCEC\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\nCCRCC\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\nHNSCC\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\nLSCC\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\nGTEX-Brain\nSolid Tissue Normal\nCPTAC-3\nCPTAC-NORMAL\n\n\n–\nPrimary Blood Derived Cancer - Peripheral Blood/Recurrent Blood Derived Cancer - Peripheral Blood/Next Generation Cancer Model/Recurrent Blood Derived Cancer - Bone Marrow/Primary Blood Derived Cancer - Bone Marrow\nTARGET-AML\nTARGET-LAML\n\n\nAcute myeloid leukemia, NOS\nPrimary Blood Derived Cancer - Bone Marrow/Recurrent Blood Derived Cancer - Bone Marrow/Primary Blood Derived Cancer - Peripheral Blood/ Blood Derived Cancer - Bone Marrow/Post-treatment/Recurrent Blood Derived Cancer - Peripheral Blood/ Blood Derived Cancer - Peripheral Blood\nTARGET-AML\nTARGET-LAML\n\n\nNeuroblastoma, NOS\nPrimary Tumor/Recurrent Tumor/Recurrent Blood Derived Cancer - Bone Marrow\nTARGET-NBL\nTARGET-NBL\n\n\nGanglioneuroblastoma\nPrimary Tumor/Recurrent Tumor\nTARGET-NBL\nTARGET-GNB\n\n\n–\nCell Lines\nTARGET-AML\nTARGET-CELL\n\n\n–\nBone Marrow Normal\nTARGET-AML\nTARGET-NORMAL\n\n\nAcute myeloid leukemia, NOS\nBlood Derived Normal/Bone Marrow Normal\nTARGET-AML\nTARGET-NORMAL\n\n\nACC\nPrimary Tumor\nTCGA-ACC\nTCGA-ACC\n\n\nBLCA\nPrimary Tumor\nTCGA-BLCA\nTCGA-BLCA\n\n\nBRCA\nPrimary Tumor\nTCGA-BRCA\nTCGA-BRCA\n\n\nBRCA\nMetastatic\nTCGA-BRCA\nTCGA-BRCA\n\n\nCESC\nPrimary Tumor\nTCGA-CESC\nTCGA-CESC\n\n\nCESC\nMetastatic\nTCGA-CESC\nTCGA-CESC\n\n\nCHOL\nPrimary Tumor\nTCGA-CHOL\nTCGA-CHOL\n\n\nCOAD\nPrimary Tumor\nTCGA-COAD\nTCGA-COAD\n\n\nCOAD\nRecurrent Tumor\nTCGA-COAD\nTCGA-COAD\n\n\nCOAD\nMetastatic\nTCGA-COAD\nTCGA-COAD\n\n\nDLBC\nPrimary Tumor\nTCGA-DLBC\nTCGA-DLBC\n\n\nESCA\nPrimary Tumor\nTCGA-ESCA\nTCGA-ESCA\n\n\nESCA\nMetastatic\nTCGA-ESCA\nTCGA-ESCA\n\n\nGBM\nPrimary Tumor\nTCGA-GBM\nTCGA-GBM\n\n\nGBM\nRecurrent Tumor\nTCGA-GBM\nTCGA-GBM\n\n\nHNSC\nPrimary Tumor\nTCGA-HNSC\nTCGA-HNSC\n\n\nHNSC\nMetastatic\nTCGA-HNSC\nTCGA-HNSC\n\n\nKICH\nPrimary Tumor\nTCGA-KICH\nTCGA-KICH\n\n\nKIRC\nPrimary Tumor\nTCGA-KIRC\nTCGA-KIRC\n\n\nKIRC\nAdditional - New Primary\nTCGA-KIRC\nTCGA-KIRC\n\n\nKIRP\nPrimary Tumor\nTCGA-KIRP\nTCGA-KIRP\n\n\nKIRP\nAdditional - New Primary\nTCGA-KIRP\nTCGA-KIRP\n\n\nLAML\nPrimary Blood Derived Cancer - Peripheral Blood\nTCGA-LAML\nTCGA-LAML\n\n\nLGG\nPrimary Tumor\nTCGA-LGG\nTCGA-LGG\n\n\nLGG\nRecurrent Tumor\nTCGA-LGG\nTCGA-LGG\n\n\nLIHC\nPrimary Tumor\nTCGA-LIHC\nTCGA-LIHC\n\n\nLIHC\nRecurrent Tumor\nTCGA-LIHC\nTCGA-LIHC\n\n\nLUAD\nPrimary Tumor\nTCGA-LUAD\nTCGA-LUAD\n\n\nLUAD\nRecurrent Tumor\nTCGA-LUAD\nTCGA-LUAD\n\n\nLUSC\nPrimary Tumor\nTCGA-LUSC\nTCGA-LUSC\n\n\nMESO\nPrimary Tumor\nTCGA-MESO\nTCGA-MESO\n\n\nOV\nPrimary Tumor\nTCGA-OV\nTCGA-OV\n\n\nOV\nRecurrent Tumor\nTCGA-OV\nTCGA-OV\n\n\nPAAD\nPrimary Tumor\nTCGA-PAAD\nTCGA-PAAD\n\n\nPAAD\nMetastatic\nTCGA-PAAD\nTCGA-PAAD\n\n\nPCPG\nPrimary Tumor\nTCGA-PCPG\nTCGA-PCPG\n\n\nPCPG\nAdditional - New Primary\nTCGA-PCPG\nTCGA-PCPG\n\n\nPCPG\nMetastatic\nTCGA-PCPG\nTCGA-PCPG\n\n\nPRAD\nPrimary Tumor\nTCGA-PRAD\nTCGA-PRAD\n\n\nPRAD\nMetastatic\nTCGA-PRAD\nTCGA-PRAD\n\n\nREAD\nPrimary Tumor\nTCGA-READ\nTCGA-READ\n\n\nREAD\nRecurrent Tumor\nTCGA-READ\nTCGA-READ\n\n\nSARC\nPrimary Tumor\nTCGA-SARC\nTCGA-SARC\n\n\nSARC\nRecurrent Tumor\nTCGA-SARC\nTCGA-SARC\n\n\nSARC\nMetastatic\nTCGA-SARC\nTCGA-SARC\n\n\nSKCM\nMetastatic\nTCGA-SKCM\nTCGA-SKCM\n\n\nSKCM\nPrimary Tumor\nTCGA-SKCM\nTCGA-SKCM\n\n\nSKCM\nAdditional Metastatic\nTCGA-SKCM\nTCGA-SKCM\n\n\nSTAD\nPrimary Tumor\nTCGA-STAD\nTCGA-STAD\n\n\nTGCT\nPrimary Tumor\nTCGA-TGCT\nTCGA-TGCT\n\n\nTGCT\nAdditional - New Primary\nTCGA-TGCT\nTCGA-TGCT\n\n\nTHCA\nPrimary Tumor\nTCGA-THCA\nTCGA-THCA\n\n\nTHCA\nMetastatic\nTCGA-THCA\nTCGA-THCA\n\n\nTHYM\nPrimary Tumor\nTCGA-THYM\nTCGA-THYM\n\n\nUCEC\nPrimary Tumor\nTCGA-UCEC\nTCGA-UCEC\n\n\nUCEC\nRecurrent Tumor\nTCGA-UCEC\nTCGA-UCEC\n\n\nUCS\nPrimary Tumor\nTCGA-UCS\nTCGA-UCS\n\n\nUVM\nPrimary Tumor\nTCGA-UVM\nTCGA-UVM\n\n\nBLCA\nSolid Tissue Normal\nTCGA-BLCA\nTCGA-NORMAL\n\n\nBRCA\nSolid Tissue Normal\nTCGA-BRCA\nTCGA-NORMAL\n\n\nCESC\nSolid Tissue Normal\nTCGA-CESC\nTCGA-NORMAL\n\n\nCHOL\nSolid Tissue Normal\nTCGA-CHOL\nTCGA-NORMAL\n\n\nCOAD\nSolid Tissue Normal\nTCGA-COAD\nTCGA-NORMAL\n\n\nESCA\nSolid Tissue Normal\nTCGA-ESCA\nTCGA-NORMAL\n\n\nHNSC\nSolid Tissue Normal\nTCGA-HNSC\nTCGA-NORMAL\n\n\nKICH\nSolid Tissue Normal\nTCGA-KICH\nTCGA-NORMAL\n\n\nKIRC\nSolid Tissue Normal\nTCGA-KIRC\nTCGA-NORMAL\n\n\nKIRP\nSolid Tissue Normal\nTCGA-KIRP\nTCGA-NORMAL\n\n\nLIHC\nSolid Tissue Normal\nTCGA-LIHC\nTCGA-NORMAL\n\n\nLUAD\nSolid Tissue Normal\nTCGA-LUAD\nTCGA-NORMAL\n\n\nLUSC\nSolid Tissue Normal\nTCGA-LUSC\nTCGA-NORMAL\n\n\nPAAD\nSolid Tissue Normal\nTCGA-PAAD\nTCGA-NORMAL\n\n\nPCPG\nSolid Tissue Normal\nTCGA-PCPG\nTCGA-NORMAL\n\n\nPRAD\nSolid Tissue Normal\nTCGA-PRAD\nTCGA-NORMAL\n\n\nREAD\nSolid Tissue Normal\nTCGA-READ\nTCGA-NORMAL\n\n\nSARC\nSolid Tissue Normal\nTCGA-SARC\nTCGA-NORMAL\n\n\nSKCM\nSolid Tissue Normal\nTCGA-SKCM\nTCGA-NORMAL\n\n\nSTAD\nSolid Tissue Normal\nTCGA-STAD\nTCGA-NORMAL\n\n\nTHCA\nSolid Tissue Normal\nTCGA-THCA\nTCGA-NORMAL\n\n\nTHYM\nSolid Tissue Normal\nTCGA-THYM\nTCGA-NORMAL\n\n\nUCEC\nSolid Tissue Normal\nTCGA-UCEC\nTCGA-NORMAL"
  },
  {
    "objectID": "methods.html#clinical-data-preprocessing",
    "href": "methods.html#clinical-data-preprocessing",
    "title": "Methods",
    "section": "Clinical data preprocessing",
    "text": "Clinical data preprocessing\n\nTCGA\nlibrary(data.table)\nlibrary(dplyr)\n\n# load(\"/home/data2/Projects/Fusion/unclean/TCGA_ALL_clinical.rdata\")\n#\n# TCGA_ALL_clinical |&gt;\n#   rename(Patient_ID = bcr_patient_barcode,\n#          Age = age_at_initial_pathologic_diagnosis,\n#          Sex = gender,\n#          Race = race,\n#          )\n\n# [Discrepancy] [Not Applicable]  [Not Available]\n# [Discrepancy] [Not Available]       [Unknown]\n# # [Discrepancy]                                        [Not Applicable]\n# 29                                                          105\n# [Not Available]                                         [Not Evaluated]\n# 5140                                                       4\n# [Unknown]\n\n\nlibrary(UCSCXenaShiny)\n\ntable(tcga_clinical_fine$Stage_ajcc)\ntcga_clinical\n\ntcga_clinical_fine\ntcga_genome_instability\ntcga_purity\ntcga_subtypes\ntcga_surv\n\nnrow(tcga_clinical_fine)\nnrow(unique(tcga_clinical_fine))\n\ntcga_clinical = unique(tcga_clinical_fine) |&gt;\n  left_join(tcga_surv, by = c(\"Sample\"=\"sample\")) |&gt;\n  left_join(tcga_purity, by = c(\"Sample\"=\"sample\"))\n\ntcga_clinical[551, ]$Sample\n\nsum(startsWith(tcga_genome_instability$sample, \"TCGA\"))\n\ntcga_clinical = tcga_clinical |&gt;\n  left_join(tcga_genome_instability[startsWith(tcga_genome_instability$sample, \"TCGA\") & !duplicated(tcga_genome_instability$sample), ],  by = c(\"Sample\"=\"sample\")) |&gt;\n  #left_join(tcga_genome_instability[duplicated(tcga_genome_instability$sample), ],  by = c(\"Sample\"=\"sample\")) |&gt;\n  left_join(tcga_subtypes,  by = c(\"Sample\"=\"sampleID\"))\n\n\nsum(is.na(tcga_clinical$Sample))\nsum(duplicated(tcga_clinical$Sample))\n\ntcga_clinical[duplicated(tcga_clinical$Sample), ]$Sample\n\ntcga_clinical.final = tcga_clinical[!duplicated(tcga_clinical$Sample), ] |&gt;\n  rename(Sample_ID = Sample, Sex = Gender, OS_Time = OS.time, OS_Status = OS, DSS_Time = DSS.time, DSS_Status = DSS, DFS_Time = DFI.time, DFS_Status = DFI, PFS_Time = PFI.time, PFS_Status = PFI) |&gt;\n  select(-cancer_type) |&gt;\n  mutate(Sex = ifelse(Sex == \"FEMALE\", \"F\", \"M\"),\n         Patient_ID = substr(Sample_ID, 1, 12))\n\nsum(is.na(tcga_clinical.final$Sample_ID))\nsum(is.na(tcga_clinical.final$Cancer))\nsum(duplicated(tcga_clinical.final$Sample_ID))\n\ntcga_clinical.final = tcga_clinical.final |&gt;\n  select(Patient_ID, Sample_ID, everything()) |&gt;\n  as.data.table()\n\ntcga_clinical.final\n\nfwrite(tcga_clinical.final, file = \"/home/data2/Projects/Fusion/fusiondb/Clininfo/TCGA_info.tsv\", sep = \"\\t\")\n\n\nCPTAC\nlibrary(data.table)\n\n\n# Clinical data from CPTAC paper ------------------------------------------\n\n\ncli_list = fs::dir_ls(\"CPTAC_Clinical_meta_data_v1/\")\n\ncli = purrr::map(cli_list, fread) |&gt; rbindlist(fill = TRUE, use.names = TRUE)\ncolnames(cli)\n# Problem: Need to skip the second row\n# This also includes samples from CPTAC-2/3, but the total number is fewer\n\ncli2 = purrr::map(cli_list, function(x) {\n  # Since the column names are also different, read them twice—once for the column names and once for the data\n  data1 = fread(x)\n  data2 = fread(x, skip = 2, header = FALSE)\n  # Update the column names\n  colnames(data2) = colnames(data1)\n  data2$Cancer = stringr::str_remove(basename(x), \"_meta.txt\")\n  data2 |&gt; as.data.table()\n}) |&gt; rbindlist(fill = TRUE, use.names = TRUE)\n#colnames(cli2) = colnames(cli)\ncolnames(cli2)\n\ncli2[Tumor == \"Yes\" & Normal == \"Yes\"] # This is to mark whether the patient has both tumor and normal samples\n\n\ncli_list2 = fs::dir_ls(\"meta_data_BCM/\")\n\ncli3 = purrr::map(cli_list2, function(x) {\n  # Since the column names are also different, read them twice—once for the column names and once for the data\n  data1 = fread(x)\n  data2 = fread(x, skip = 2, header = FALSE)\n  # 更新列名\n  colnames(data2) = colnames(data1)\n  data2$Cancer = stringr::str_remove(basename(x), \"_meta.txt\")\n  data2 |&gt; as.data.table()\n}) |&gt; rbindlist(fill = TRUE, use.names = TRUE)\ncolnames(cli3)\n\nall.equal(cli2, cli3)\nall.equal(sort(colnames(cli2)), sort(colnames(cli3)))\n\ncli4 = cli3[, colnames(cli2), with = FALSE]\nall.equal(cli2, cli4)\nidentical(cli2, cli4)\n\ndplyr::setdiff(cli2, cli4) |&gt; View()\ndplyr::setdiff(cli4, cli2) |&gt; nrow()\n\n# rbind(cli2[idx == \"01OV007\"],\n#       cli4[idx == \"01OV007\"]) |&gt; View()\n\n# The files in the directories of the two data sources are basically identical\n\ncli.final = cli2 |&gt;\n  dplyr::rename(\n    Patient_ID = idx,\n    OS_Status = OS_event,\n    OS_Time = OS_days,\n    PFS_Status = PFS_event,\n    PFS_Time = PFS_days\n  ) |&gt;\n  dplyr::mutate(\n    Sample_ID = Patient_ID,\n    Sex = ifelse(Sex == \"Female\", \"F\", \"M\")\n  ) |&gt;\n  dplyr::select(\n    Patient_ID, Sample_ID, Cancer, Age, Sex, OS_Time, OS_Status, PFS_Time, PFS_Status, dplyr::everything()\n  )\n  # dplyr::select(\n  #   - dplyr::starts_with(\"CIBERSORT\"), - dplyr::starts_with(\"xCell\")\n  # )\n\n\nfwrite(cli.final, file = \"CPTAC_cli_paper_combined.tsv\", sep = \"\\t\")\n\n# Clinical data from GDC --------------------------------------------------\n\n\nsystem(\"\ncd /home/data2/Projects/Fusion/unclean/gdc_cli/CPTAC\nmkdir CPTAC-3 CPTAC-2\ntar zxvf clinical.project-cptac-2.2024-08-07.tar.gz -C CPTAC-2\ntar zxvf clinical.project-cptac-3.2024-08-07.tar.gz -C CPTAC-3\n       \")\n\ncptac2 = fread(\"gdc_cli/CPTAC/CPTAC-2/clinical.tsv\")\ncptac3 = fread(\"gdc_cli/CPTAC/CPTAC-3/clinical.tsv\")\n\nwhich(colnames(cptac2) %in% \"residual_disease\")\nwhich(colnames(cptac3) %in% \"residual_disease\")\nall.equal(cptac2[[119]], cptac2[[192]])\nall.equal(cptac3[[119]], cptac3[[192]])\ncptac2[[192]] = NULL\ncptac3[[192]] = NULL\n\nsetdiff(cptac2$case_submitter_id, cli.final$Sample_ID)\nsetdiff(cptac3$case_submitter_id, cli.final$Sample_ID)\n# &gt; setdiff(cptac2$case_submitter_id, cli.final$Sample_ID)\n# [1] \"01OV049\"   \"26OV010\"   \"100004028\" \"05BR058\"   \"05BR055\"   \"17OV019\"   \"11BR069\"   \"02OV042\"   \"100004012\" \"05BR051\"   \"03BR012\"   \"02OV045\"   \"04OV041\"\n# [14] \"05BR052\"   \"05BR031\"   \"1488\"      \"11OV009\"   \"02OV040\"   \"01OV002\"   \"100002921\" \"22OV001\"   \"13OV004\"   \"100003304\" \"02OV035\"   \"01OV046\"   \"01OV045\"\n# [27] \"17OV034\"\n# &gt; setdiff(cptac3$case_submitter_id, cli.final$Sample_ID)\n# [1] \"C3N-02672\"                    \"C3L-01929\"                    \"C3N-02682\"                    \"C3N-02012\"                    \"C3N-02070\"\n# [6] \"C3N-02696\"                    \"C3L-02354\"                    \"C3N-03026\"                    \"C3L-01739\"                    \"C3N-02088\"\n# [11] \"C3L-04213\"                    \"C3N-03205\"                    \"C3L-04081\"                    \"C3N-03791\"                    \"C3L-03679\"\n# [16] \"C3L-02643\"                    \"C3N-04686\"                    \"C3L-01558\"                    \"C3L-03268\"                    \"C3L-01633\"\n# [21] \"C3L-02220\"                    \"C3N-02439\"                    \"C3N-02028\"                    \"C3N-03800\"                    \"C3L-04392\"\n# [26] \"C3L-02556\"                    \"C3N-02721\"                    \"C3L-01672\"                    \"C3L-00938\"                    \"C3L-02201\"\n# [31] \"C3N-02146\"                    \"C3N-02639\"                    \"C3N-03788\"                    \"C3L-03733\"                    \"C3L-04037\"\n# [36] \"C3N-01091\"                    \"C3L-02747\"                    \"C3N-01879\"                    \"C3N-02996\"                    \"C3N-02296\"\n# [41] \"C3L-02553\"                    \"C3L-03632\"                    \"C3N-03755\"                    \"GTEX-NPJ7-0011-R10A-SM-HAKXW\" \"C3L-02746\"\nlength(setdiff(cptac3$case_submitter_id, cli.final$Sample_ID))  # 586\n\n\nView(cptac2[case_submitter_id %in% setdiff(cptac2$case_submitter_id, cli.final$Sample_ID)])\nView(cptac3[case_submitter_id %in% setdiff(cptac3$case_submitter_id, cli.final$Sample_ID)])\n\ndata.table::fwrite(\n  cptac3[case_submitter_id %in% setdiff(cptac3$case_submitter_id, cli.final$Sample_ID)],\n  file = \"CPTAC3_non_included.tsv\", sep = \"\\t\"\n)\n\ncptac3\n\n\n# Supplement the missing sample information in the paper based on the existing information in the GDC. ---------------------------------------------\n\n# might be columns that have labeled cancer types.\n# primary_diagnosis site_of_resection_or_biopsy tissue_or_organ_of_origin\n\ncptac = rbind(cptac2, cptac3)[, .(case_submitter_id, primary_diagnosis, site_of_resection_or_biopsy, tissue_or_organ_of_origin)] |&gt; unique()\ncptac = dplyr::left_join(cptac, cli.final[, .(Sample_ID, Cancer)], by = c(\"case_submitter_id\"=\"Sample_ID\"))\n\nsetdiff(cli.final$Sample_ID, cptac$case_submitter_id)\n# 29 cases are not in the GDC data.\n\ntable(cptac$Cancer, cptac$primary_diagnosis) |&gt; pheatmap::pheatmap()\ntable(cptac$Cancer, cptac$site_of_resection_or_biopsy) |&gt; pheatmap::pheatmap()\ntable(cptac$Cancer, cptac$tissue_or_organ_of_origin) |&gt; pheatmap::pheatmap()\n\ntable(cptac$Cancer,\n      paste(\n        cptac$primary_diagnosis,\n        cptac$site_of_resection_or_biopsy,\n        cptac$tissue_or_organ_of_origin, sep = \"_\"\n      )) |&gt; pheatmap::pheatmap(show_colnames = FALSE)\n\n# Solve them one by one.\ncat(sub(\"_meta.txt\", \"\", basename(names(cli_list))))\n\ntypelist = sub(\"_meta.txt\", \"\", basename(names(cli_list)))\n# BRCA CCRCC COAD GBM HGSC HNSCC LSCC LUAD PDAC UCEC\nfor (i in typelist) {\n  message(\"check type \", i)\n  cptac_part = cptac |&gt; dplyr::filter(Cancer == i)\n  message(\"  primary_diagnosis\")\n  table(cptac_part$Cancer, cptac_part$primary_diagnosis) |&gt; print()\n  message(\"  site_of_resection_or_biopsy\")\n  table(cptac_part$Cancer, cptac_part$site_of_resection_or_biopsy) |&gt; print()\n  message(\"  tissue_or_organ_of_origin\")\n  table(cptac_part$Cancer, cptac_part$tissue_or_organ_of_origin) |&gt; print()\n}\n# BRCA (122): tissue_or_organ_of_origin \"Breast, NOS\"\n# CCRCC (103): primary_diagnosis \"Renal cell carcinoma, NOS\"\n#        tissue_or_organ_of_origin \"Kidney, NOS\"\n# COAD (106): tissue_or_organ_of_origin \"Colon, NOS\", \"Rectum, NOS\"\n# GBM (99): primary_diagnosis \"Glioblastoma\"\n# HGSC (87): primary_diagnosis \"Serous adenocarcinoma, NOS\" AND\n#  tissue_or_organ_of_origin Fallopian tube Ovary Peritoneum, NOS\n# HNSCC (108): Other situation: primary_diagnosis \"Squamous cell carcinoma, NOS\"\n# Base of tongue, NOS Cheek mucosa Floor of mouth, NOS Gum, NOS\n# HNSCC                   1            2                  18        3\n#\n# Head, face or neck, NOS Larynx, NOS Lip, NOS Oropharynx, NOS\n# HNSCC                       2          47        4               4\n#\n# Overlapping lesion of lip, oral cavity and pharynx Tongue, NOS Tonsil, NOS\n# HNSCC\n# LSCC (108): primary_diagnosis \"Squamous cell carcinoma, NOS\" AND\n#   tissue_or_organ_of_origin \"lung\" pattern\n# LUAD (110): primary_diagnosis \"Adenocarcinoma, NOS\" AND\n#   tissue_or_organ_of_origin \"lung\" pattern\n# PDAC (105): tissue_or_organ_of_origin \"pancreas\" pattern\n# UCEC (95): primary_diagnosis \"Endometrioid adenocarcinoma, NOS\"\nsum(!is.na(cptac$Cancer))\n\n# rbind(cptac2, cptac3)[,192] # There are duplicate columns, need to go back and handle this earlier (fixed).\n\n# Actual testing and updating\ncptac_updated = rbind(cptac2, cptac3) |&gt;\n  unique() |&gt;\n  dplyr::mutate(\n    Cancer = dplyr::case_when(\n      tissue_or_organ_of_origin %in% \"Breast, NOS\" ~ \"BRCA\",\n      primary_diagnosis %in% \"Renal cell carcinoma, NOS\" ~ \"CCRCC\",\n      tissue_or_organ_of_origin %in% c(\"Colon, NOS\", \"Rectum, NOS\") ~ \"COAD\",\n      grepl(\"Glioblastoma\", primary_diagnosis, ignore.case = TRUE) | grepl(\"Oligodendroglioma\", primary_diagnosis, ignore.case = TRUE) ~ \"GBM\",\n      grepl(\"GTEX\", case_submitter_id, ignore.case = TRUE) ~ \"GTEX-Brain\",\n      case_submitter_id %in% c(\"C3L-06912\", \"C3L-07212\") ~ \"GBM\",\n      #primary_diagnosis %in% \"Glioblastoma\" ~ \"GBM\",\n      primary_diagnosis %in% \"Serous adenocarcinoma, NOS\" & tissue_or_organ_of_origin %in% c(\"Fallopian tube\", \"Ovary\", \"Peritoneum, NOS\") ~ \"HGSC\",\n      primary_diagnosis %in% \"Squamous cell carcinoma, NOS\" & grepl(\"lung\", tissue_or_organ_of_origin, ignore.case = TRUE) ~ \"LSCC\",\n      primary_diagnosis %in% \"Adenocarcinoma, NOS\" & grepl(\"lung\", tissue_or_organ_of_origin, ignore.case = TRUE) ~ \"LUAD\",\n      grepl(\"pancreas\", tissue_or_organ_of_origin, ignore.case = TRUE) ~ \"PDAC\",\n      primary_diagnosis %in% \"Endometrioid adenocarcinoma, NOS\" ~ \"UCEC\",\n      TRUE ~ \"HNSCC\"\n    )\n  ) |&gt; as.data.table()\n\nfor (i in \"HNSCC\") { # typelist\n  message(\"check type \", i)\n  cptac_part = cptac_updated |&gt; dplyr::filter(Cancer == i)\n  message(\"  primary_diagnosis\")\n  table(cptac_part$Cancer, cptac_part$primary_diagnosis) |&gt; print()\n  message(\"  site_of_resection_or_biopsy\")\n  table(cptac_part$Cancer, cptac_part$site_of_resection_or_biopsy) |&gt; print()\n  message(\"  tissue_or_organ_of_origin\")\n  table(cptac_part$Cancer, cptac_part$tissue_or_organ_of_origin) |&gt; print()\n}\n\ntable(cptac$Cancer)\ntable(cptac_updated$Cancer)\n\ncptac_updated |&gt;\n  dplyr::filter(\n    primary_diagnosis == \"'--\" | site_of_resection_or_biopsy == \"'--\" |\n    tissue_or_organ_of_origin %in% c(\"'--\", \"Unknown\")\n  )\n# 1-9 from GTEX-Brain\n# C3L-06912 C3L-07212 Gliomas # https://portal.gdc.cancer.gov/cases/e6027623-a5b2-4d82-a9ca-f37c948dd3ed\ncptac_updated$case_submitter_id[grepl(\"GTEX\", cptac_updated$case_submitter_id)]\n\nnrow(cptac_updated)\n\nfwrite(cptac_updated, file = \"CPTAC_combined_with_cancer_annotated.tsv\", sep = \"\\t\")\n\ncptac_unmatched = cptac_updated[! case_submitter_id %in% cli.final$Sample_ID]\ncolnames(cptac_unmatched)\ncolnames(cli.final)[1:20]\n\ncptac_unmatched2 = cptac_unmatched |&gt;\n  dplyr::select(\n    case_submitter_id, age_at_diagnosis, gender,\n    days_to_death, vital_status,\n    dplyr::starts_with(\"ajcc\"),\n    dplyr::starts_with(\"days\"),\n    last_known_disease_status, progression_or_recurrence, residual_disease,\n    tumor_grade, Cancer\n  )\n\nsum(cptac_unmatched2$days_to_last_follow_up != \"'--\")\nsum(cptac_unmatched2$days_to_death != \"'--\")\nsum(cptac_unmatched2$days_to_recurrence != \"'--\")\nsum(cptac_unmatched2$days_to_last_known_disease_status != \"'--\")\n\nsum(cptac_unmatched2$progression_or_recurrence != \"'--\")\n\n\nsum(!is.na(cli.final$OS_Time))\nsum(!is.na(cli.final$PFS_Time))\nsum(cli.final$OS_Time &gt;= cli.final$PFS_Time, na.rm = TRUE)\ncli.final[cli.final$OS_Time &lt; cli.final$PFS_Time] |&gt; View()\n\nsum(as.integer(cptac_unmatched2$days_to_last_follow_up) &gt;= as.integer(cptac_unmatched2$days_to_last_known_disease_status), na.rm = TRUE)\n\ncptac_unmatched3 = cptac_unmatched2 |&gt;\n  dplyr::rename(\n    Sample_ID = case_submitter_id,\n    Age = age_at_diagnosis,\n    Sex = gender,\n    OS_Time = days_to_last_follow_up,\n    OS_Status = vital_status,\n    PFS_Time = days_to_last_known_disease_status,\n    PFS_Status = progression_or_recurrence,\n    Histologic_Grade = tumor_grade,\n    Path_Stage_pT = ajcc_pathologic_t,\n    Path_Stage_pN = ajcc_pathologic_n,\n    Stage = ajcc_pathologic_stage\n  ) |&gt;\n  dplyr::select(\n    Sample_ID, Age, Sex, OS_Time, OS_Status, PFS_Time, PFS_Status,\n    Path_Stage_pN:Path_Stage_pT,\n    Histologic_Grade, Cancer\n  ) |&gt;\n  dplyr::mutate(\n    Patient_ID = Sample_ID,\n    Age = as.integer(round(as.integer(Age) / 365)),\n    Sex = fcase(Sex %in% \"female\", \"F\",\n                Sex %in% \"male\", \"M\", default = NA_character_),\n    OS_Time = as.integer(OS_Time),\n    OS_Status = fcase(OS_Status %in% \"Alive\", 0L,\n                      OS_Status %in% \"Dead\", 1L, default = NA_integer_),\n    PFS_Time = as.integer(PFS_Time),\n    PFS_Status = fcase(PFS_Status %in% \"no\", 0L,\n                       PFS_Status %in% \"yes\", 1L, default = NA_integer_),\n    OS_Time = ifelse(OS_Time &lt; 0, NA_integer_, OS_Time),\n    Path_Stage_pN = fcase(\n      Path_Stage_pN %in% \"N0\", \"pN0\",\n      Path_Stage_pN %in% c(\"N1\", \"N1a\"), \"pN1\",\n      Path_Stage_pN %in% c(\"N2\", \"N2a\"), \"pN2\",\n      default = NA_character_\n    ),\n    Path_Stage_pT = fcase(\n      Path_Stage_pT %in% \"T0\", \"pT0\",\n      Path_Stage_pT %in% c(\"T1\", \"T1a\", \"T1b\", \"T1c\"), \"pT1\",\n      Path_Stage_pT %in% c(\"T2\", \"T2a\", \"T2b\"), \"pT2\",\n      Path_Stage_pT %in% c(\"T3\", \"T3a\", \"T3b\"), \"pT3\",\n      Path_Stage_pT %in% \"T4\", \"pT4\",\n      default = NA_character_\n    ),\n    Stage = fcase(\n      Stage %in% c(\"Stage I\", \"Stage IA\", \"Stage IA1\", \"Stage IA2\", \"Stage IA3\", \"Stage IB\"), \"Stage I\",\n      Stage %in% c(\"Stage II\", \"Stage IIA\", \"Stage IIB\"), \"Stage II\",\n      Stage %in% c(\"Stage III\", \"Stage IIIA\", \"Stage IIIB\", \"Stage IIIC\", \"Stage IIIC1\", \"Stage IIIC2\"), \"Stage III\",\n      Stage %in% c(\"Stage IV\", \"Stage IVB\"), \"Stage IV\",\n      default = NA_character_\n    ),\n    Histologic_Grade = fcase(\n      Histologic_Grade %in% \"G1\", \"G1 Well differentiated\",\n      Histologic_Grade %in% \"G2\", \"G2 Moderately differentiated\",\n      Histologic_Grade %in% \"G3\", \"G3 Poorly differentiated\",\n      Histologic_Grade %in% \"G4\", \"G4 Undifferentiated\",\n      default = NA_character_\n    )\n  )\n\ncptac_unmatched3\n\n# X: cannot be assessed\n\ntable(cptac_unmatched3$Path_Stage_pN)\ntable(cli.final$Path_Stage_pN)\n\ntable(cptac_unmatched3$Path_Stage_pT)\ntable(cli.final$Path_Stage_pT)\n\ntable(cptac_unmatched3$Stage)\ntable(cli.final$Stage)\n\ntable(cptac_unmatched3$Histologic_Grade)\ntable(cli.final$Histologic_Grade)\n\n\n\n# Final output ------------------------------------------------------------\n\ncli.final.2 = dplyr::bind_rows(\n  cli.final, cptac_unmatched3\n) |&gt; as.data.table()\n\ntable(cli.final.2$Cancer)\nsum(table(cli.final.2$Cancer))\n\n# Include all Race information?\ncli.final.2 = dplyr::left_join(\n  cli.final.2, unique(rbind(cptac2, cptac3)[, .(case_submitter_id, race)]),\n  by = c(\"Sample_ID\"=\"case_submitter_id\")\n) |&gt;\n  dplyr::mutate(\n    race = ifelse(race %in% c(\"Unknown\", \"not reported\"), NA_character_,\n                  race)\n  ) |&gt;\n  as.data.table()\n\nsum(is.na(cli.final.2$race))\n\nfwrite(cli.final.2, file = \"/home/data2/Projects/Fusion/fusiondb/Clininfo/CPTAC_info.tsv\", sep = \"\\t\")\n\n\nTARGET\nlibrary(data.table)\n\ncli1 = fread(\"TARGET_donor_allprojects_transfer_to_sample.gz\")\ncli2 = fread(\"TARGET_phenotype.gz\")\n\ntarget_cli = cli2 |&gt;\n  dplyr::select(-`_cohort`) |&gt;\n  dplyr::rename(Patient_ID = `_PATIENT`,\n                Sample_ID = sample_id,\n                disease_code = primary_disease_code,\n                disease = `_primary_disease`,\n                sample_type = `_sample_type`) |&gt;\n  dplyr::full_join(\n    cli1 |&gt; dplyr::select(\n      -`_OS_UNIT`, -`_EVENT`, -`_TIME_TO_EVENT`\n    ) |&gt;\n      dplyr::rename(\n        Sample_ID = xena_sample,\n        Sex = `_gender`,\n        Age = `_age_at_diagnosis`,\n        OS_Status = `_OS_IND`,\n        OS_Time = `_OS`\n      ), by = \"Sample_ID\"\n  ) |&gt;\n  dplyr::mutate(\n    Sex = ifelse(Sex == \"Male\", \"M\", \"F\"),\n    OS_Status = ifelse(OS_Status == \"Alive\", 0L, 1L)\n  ) |&gt;\n  dplyr::select(Patient_ID, Sample_ID, Age, Sex, OS_Time, OS_Status, dplyr::everything()) |&gt;\n  as.data.table()\n\ncli1\n\ntarget_cli\n\nfwrite(target_cli, file = \"/home/data2/Projects/Fusion/fusiondb/Clininfo/TARGET_xena_info.tsv\", sep = \"\\t\")\n\n\n# Using cli from GDC ------------------------------------------------------\n\nsystem(\"\ncd /home/data2/Projects/Fusion/unclean/gdc_cli/TARGET\nmkdir ALL_P1 ALL_P2 ALL_P3 AML CCSK NBL OS RT WT\ntar zxvf clinical.project-target-all-p1.2024-08-07.tar.gz -C ALL_P1\ntar zxvf clinical.project-target-all-p2.2024-08-07.tar.gz -C ALL_P2\ntar zxvf clinical.project-target-all-p3.2024-08-07.tar.gz -C ALL_P3\ntar zxvf clinical.project-target-aml.2024-08-07.tar.gz -C AML\ntar zxvf clinical.project-target-ccsk.2024-08-07.tar.gz -C CCSK\ntar zxvf clinical.project-target-nbl.2024-08-07.tar.gz -C NBL\ntar zxvf clinical.project-target-os.2024-08-07.tar.gz -C OS\ntar zxvf clinical.project-target-rt.2024-08-07.tar.gz -C RT\ntar zxvf clinical.project-target-wt.2024-08-07.tar.gz -C WT\n       \")\n\ngdc_target = rbindlist(\n  list(\n    fread(\"gdc_cli/TARGET/ALL_P1/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/ALL_P2/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/ALL_P3/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/AML/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/CCSK/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/NBL/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/OS/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/RT/clinical.tsv\"),\n    fread(\"gdc_cli/TARGET/WT/clinical.tsv\")\n  ),\n  use.names = TRUE, fill = TRUE\n)\n\ntable(gdc_target$project_id)\nany(duplicated(gdc_target))\ngdc_target = gdc_target[!duplicated(gdc_target)]\n\nall.equal(gdc_target[[119]], gdc_target[[192]])\ngdc_target[[192]] = NULL\n\nsum(gdc_target$days_to_last_follow_up != \"'--\")\nsum(gdc_target$days_to_death != \"'--\")\n\ngdc_target2 = gdc_target |&gt;\n  dplyr::rename(\n    Sample_ID = case_submitter_id,\n    Age = age_at_diagnosis,\n    Sex = gender,\n    OS_Time = days_to_death,\n    OS_Status = vital_status\n  ) |&gt;\n  dplyr::select(\n    Sample_ID, Age, Sex, OS_Time, OS_Status,\n    project_id, race, primary_diagnosis\n  ) |&gt;\n  dplyr::mutate(\n    Patient_ID = Sample_ID,\n    Age = as.integer(round(as.integer(Age) / 365)),\n    Sex = fcase(Sex %in% \"female\", \"F\",\n                Sex %in% \"male\", \"M\", default = NA_character_),\n    OS_Time = as.integer(OS_Time),\n    OS_Status = fcase(OS_Status %in% \"Alive\", 0L,\n                      OS_Status %in% \"Dead\", 1L, default = NA_integer_),\n    OS_Time = ifelse(OS_Time &lt; 0, NA_integer_, OS_Time)\n  ) |&gt;\n  as.data.table()\n\n#unique()\n\n# exist  a large number of case level  replicate\ngdc_target2[duplicated(gdc_target2), ]\nduplicated(gdc_target[case_submitter_id == \"TARGET-20-PANTIV\"])\ngdc_target[case_submitter_id == \"TARGET-20-PANTIV\"] |&gt; View() # A few records that have been updated？\n\ngdc_target2 = gdc_target2[!duplicated(gdc_target2)]\n\n#table(gdc_target2$PFS_Time)\nany(duplicated(gdc_target2))\nany(duplicated(gdc_target2$Sample_ID))\n\ngdc_target2[duplicated(gdc_target2$Sample_ID)]\n# They may exist in different ALL projects.\ngdc_dup = gdc_target2[Sample_ID %in% Sample_ID[duplicated(Sample_ID)]]\ntable(gdc_dup$project_id)\n# TARGET-ALL-P1 TARGET-ALL-P2 TARGET-ALL-P3\n# 10            57            47\n#\n# For now, we won't address this issue. If we conduct a combined analysis of ALL, we will consider removing duplicates.\n\ncolnames(gdc_target2)\ngdc_target2 = gdc_target2[, c(\"Patient_ID\", \"Sample_ID\", \"Age\", \"Sex\", \"race\", \"primary_diagnosis\", \"OS_Time\", \"OS_Status\", \"project_id\")]\n\nfwrite(gdc_target2, file = \"/home/data2/Projects/Fusion/fusiondb/Clininfo/TARGET_info.tsv\", sep = \"\\t\")\n\nsum(!is.na(gdc_target2$OS_Time))\nsum(!is.na(cli1$`_OS`))\n\nnrow(na.omit(unique(target_cli[, .(Patient_ID, OS_Time, OS_Status)])))\nnrow(na.omit(unique(gdc_target2[, .(Patient_ID, OS_Time, OS_Status)])))"
  },
  {
    "objectID": "methods.html#tcgatargetcptac-clinicaliobrtmegene-data-divide-and-anotate-preprocessing",
    "href": "methods.html#tcgatargetcptac-clinicaliobrtmegene-data-divide-and-anotate-preprocessing",
    "title": "Methods",
    "section": "TCGA/TARGET/CPTAC Clinical/IOBR/TME/GENE data divide and anotate preprocessing",
    "text": "TCGA/TARGET/CPTAC Clinical/IOBR/TME/GENE data divide and anotate preprocessing\n\nTARGET\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\n\nfile_meta &lt;- \"/home/data2/Projects/Fusion/fusiondb_v3/metafusion_calls_matched.cptac.tsv\"\nmetafusion &lt;- fread(file_meta, sep = \"\\t\")\n\n# TARGET\n## info\n### Because some projects are not included in the target_sheet, we should abandon them.\nTARGET_sheet &lt;- fread(\"/home/data2/Projects/Fusion/unclean/TARGET_gdc_sample_sheet.2023-11-15.tsv\", sep = \"\\t\")\nproject_choose &lt;- substr(TARGET_sheet$`Sample ID`, 1, 9) |&gt; unique()\nproject_choose\n### \"TARGET-20\" \"TARGET-00\" \"TARGET-21\" \"TARGET-30\"\n\n### TARGET_sheet pretreatment\n\n### Composite Sample \n###\n### Composite Sample use comma to separate like TARGET-30-PAPEAV, TARGET-30-PAPTFZ\nTARGET_Composite &lt;- TARGET_sheet |&gt; \n  filter(grepl(\", \", `Sample ID`)) |&gt;  \n  select(`Sample ID`) |&gt;\n  unique()\nTARGET_Composite\n### 1: TARGET-30-PAPEAV-01A, TARGET-30-PAPTFZ-01A\n### 2: TARGET-30-PANUKV-01A, TARGET-30-PASUML-01A\n### 3: TARGET-30-PANKFE-01A, TARGET-30-PAPUAR-01A\n### 4: TARGET-30-PASYPX-01A, TARGET-30-PAIXIF-01A\n\n### For the CPTAC databases, check whether there is any overlap between composite and normal Sample_ID in the info data. \ncheck_TARGET_overlap &lt;- TARGET_sheet |&gt;  \n  select(c(`Case ID`, `Sample ID`, `Sample Type`, `Project ID`)) |&gt;\n  unique() |&gt; \n  separate_rows(`Sample ID`, sep = \",\\\\s*\") \n\ncheck_TARGET_overlap &lt;- check_TARGET_overlap |&gt;\n  mutate(Sample_Type = ifelse(grepl(\", \", `Sample ID`), \"Composite\", \"Normal\"))\n\noverlap_samples &lt;- check_TARGET_overlap |&gt;\n  group_by(`Sample ID`) |&gt;\n  summarise(Count = n(), .groups = 'drop') |&gt;\n  filter(Count &gt; 1)\n\noverlap_samples\n###  A tibble: 4 × 2\n###  `Sample ID`          Count\n###  &lt;chr&gt;                &lt;int&gt;\n###  1 TARGET-30-PANKFE-01A     2\n###  2 TARGET-30-PAPTFZ-01A     2\n###  3 TARGET-30-PASUML-01A     2\n###  4 TARGET-30-PASYPX-01A     2\n\n### So we choose abandon them.\n\nTARGET_pretreatment &lt;- TARGET_sheet |&gt; \n  select(c(`Case ID`, `Sample ID`, `Sample Type`)) |&gt;\n  rename(\"Patient_ID\" = `Case ID`,\n         \"Sample_ID\" = `Sample ID`,\n         \"Sample_type\"  =  `Sample Type`) |&gt; \n  filter(!grepl(\",\", Sample_ID)) |&gt; \n  filter(grepl(\"^TARGET-(20|00|21|30)\", Sample_ID)) |&gt; \n  unique()\n\n### TARGET_xena_info pretreatment\n### This data use\nTARGET_xena_info &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/Clininfo/TARGET_xena_info.tsv\", sep = \"\\t\") \nTARGET_xena_pretreatment   &lt;- TARGET_xena_info |&gt;\n                              mutate(Patient_ID = str_extract(Sample_ID, \"^[^-]+-[^-]+-[^-]+\")) |&gt;\n                              filter(grepl(\"^TARGET-(20|00|21|30)\", Sample_ID)) |&gt;\n                              mutate(Age = round(Age, digits = 0),\n                                     across(c(Age, OS_Time, OS_Status), ~ as.integer(.))) |&gt;\n                              rename(Cancer = disease_code)\n\n### TARGET_info pretreatment\n### In the TARGET database, rows with the info column marked as '--' are annotated as NA.\nfilter_lose &lt;- function(x) {\n  is.na(x) | x == \"\" | x == \"--\" | x == \"Unknown\" | x == \"'--\"\n }\nTARGET_info &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/Clininfo/TARGET_info.tsv\", sep = \"\\t\") \nreplacement_table2 &lt;- c(\n  \"Acute lymphocytic leukemia\" =  \"TARGET-ALL\",             \n  \"'--\"   = \"TARGET-Unkown\",                                  \n  \"Precursor B-cell lymphoblastic leukemia\" = \"TARGET-B-ALL\", \n  \"Not Reported\"  = \"TARGET-Unkown\",                         \n  \"Acute myeloid leukemia, NOS\" = \"TARGET-LAML\",             \n  \"Clear cell sarcoma of kidney\" = \"TARGET-CCSK\",           \n  \"Neuroblastoma, NOS\"  = \"TARGET-NBL\",                     \n  \"Ganglioneuroblastoma\" = \"TARGET-GNB\",                   \n  \"Osteosarcoma, NOS\"   = \"TARGET-OS\",                    \n  \"Malignant rhabdoid tumor\" = \"TARGET-MRT\",               \n  \"Wilms tumor\" = \"TARGET-WT\"  \n)\nmatched2 &lt;- TARGET_info$primary_diagnosis %in% names(replacement_table2)\nTARGET_info_pretreatment &lt;- TARGET_info |&gt;\n                            mutate(cohort = case_when(\n                                   matched2 ~ replacement_table2[primary_diagnosis],\n                                   TRUE ~ as.character(NA)  \n                                   )) |&gt;\n                            rename(Cancer = primary_diagnosis,\n                                   Project_id = project_id) |&gt; \n                            filter(grepl(\"^TARGET-(20|00|21|30)\", Sample_ID)) |&gt; \n                            mutate(across(c(\"Age\", \"Sex\", \"OS_Time\", \"OS_Status\", \"race\"), ~ ifelse(filter_lose(.x), NA, .x))) |&gt; \n                            mutate(Cancer = ifelse(Cancer == \"'--\", NA, Cancer))\n\n### Check if the valid rows in TARGET_info match the valid rows in TARGET_xena_info.\n\n### 1.Filter the valid rows.\nfilter_valid &lt;- function(x) {\n  !is.na(x) & x != \"\" & x != \"--\" & x != \"Unknown\" & x == \"'--\"\n}\n\n### Filter the valid rows in TARGET_info.\nTARGET_info_valid &lt;- TARGET_info_pretreatment %&gt;%\n                     filter(filter_valid(Age) & filter_valid(OS_Time) & filter_valid(OS_Status) & filter_valid(Sex)) |&gt;\n                     select(c(Patient_ID, Age, OS_Time, OS_Status, Sex))\n\n### Filter the valid rows in TARGET_xena_info.\nTARGET_xena_info_valid &lt;- TARGET_xena_pretreatment %&gt;%\n                          filter(filter_valid(Age) & filter_valid(OS_Time) & filter_valid(OS_Status) & filter_valid(Sex)) |&gt;\n                          select(c(Patient_ID, Age, OS_Time, OS_Status, Sex))\n\n### 2. Merge the two data frames based on Patient_ID.\nmerged_data &lt;- TARGET_info_valid %&gt;%\n               inner_join(TARGET_xena_info_valid, by = \"Patient_ID\", suffix = c(\"_info\", \"_xena\"))\n\n### 3. Check whether the valid values in the merged data frame are consistent.\nis_consistent &lt;- merged_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    Age_consistent = Age_info == Age_xena,\n    Sex_consistent = Sex_info == Sex_xena,\n    OS_Time_consistent = OS_Time_info == OS_Time_xena,\n    OS_Status_consistent = OS_Status_info == OS_Status_xena\n  ) %&gt;%\n  ungroup()\n\n### 4. Age not onsistent\nAge_not_consistent &lt;- is_consistent |&gt; \n                      filter(Age_consistent == \"FALSE\") \n\n### 5. Sex not onsistent\nSex_not_consistent &lt;- is_consistent |&gt; \n                      filter(Sex_consistent == \"FALSE\") \n### Sex_not_consistent\n\n###  A tibble: 0 × 13\n\n### 6. OS_Time not onsistent\nOS_Time_not_consistent &lt;- is_consistent |&gt; \n                          filter(OS_Time_consistent == \"FALSE\") |&gt;\n                          mutate(\n                          OS_Time_info_greater = OS_Time_info &gt; OS_Time_xena,  \n                          OS_Time_xena_greater = OS_Time_xena &gt; OS_Time_info,  \n                          OS_Time_equal = OS_Time_info == OS_Time_xena         \n                          )\nnrow(OS_Time_not_consistent |&gt; filter(OS_Time_info_greater == \"FALSE\"))\n### [1]0\nnrow(OS_Time_not_consistent |&gt; filter(OS_Time_xena_greater == \"TRUE\"))\n### [1]0\nnrow(OS_Time_not_consistent |&gt; filter(OS_Time_equal == \"TRUE\"))\n### [1]0\n\n### 7. OS_Status not onsistent\nOS_Status_not_consistent &lt;- is_consistent |&gt; \n                            filter(OS_Status_consistent == \"FALSE\") \n\nunique(OS_Status_not_consistent$OS_Status_info)\n### [1] 1\nunique(OS_Status_not_consistent$OS_Status_xena)\n### [1] 0\n\n### All evidence shows that the GDC data has been updated more recently than the Xena data.\n### Therefore, if there is a conflict between GDC data and Xena data, we should use the GDC data.\n\n### Use the valid values from TARGET_xena_info to fill the missing values in TARGET_info.\n### 1: Determine the matching Patient_ID.\nmatched_ids &lt;- intersect(TARGET_xena_pretreatment$Patient_ID, TARGET_info_pretreatment$Patient_ID)\nsetDT(TARGET_xena_pretreatment)\nsetDT(TARGET_info_pretreatment)\n\n### 2: Find the columns that require updates.\ncols_to_update &lt;- setdiff(names(TARGET_info_pretreatment), c(\"Sample_ID\", \"Patient_ID\", \"Cancer\",\"project_id\",\"cohort\",\"race\"))\n\n### 3.Iterate through each matching Patient_ID and update TARGET_info_pretreatment using TARGET_xena_pretreatment.\n### update Age\nTARGET_xena_can  &lt;-  TARGET_xena_pretreatment |&gt; \n                     filter(if_any(\"Age\", ~ !filter_lose(.x))) \n\nTARGET_info_match &lt;- TARGET_info_pretreatment |&gt;\n                            mutate(Age = case_when(\n                                                   filter_lose(Age) & Patient_ID %in% TARGET_xena_can$Patient_ID ~  TARGET_xena_can$Age[match(Patient_ID, TARGET_xena_can$Patient_ID)],\n                                                   TRUE ~ Age))\n\n### update Sex\nTARGET_xena_can  &lt;-  TARGET_xena_pretreatment |&gt; \n                     filter(if_any(\"Sex\", ~ !filter_lose(.x))) \n\nTARGET_info_match1 &lt;- TARGET_info_match |&gt;\n                            mutate(Sex = case_when(\n                                                   filter_lose(Sex) & Patient_ID %in% TARGET_xena_can$Patient_ID ~  TARGET_xena_can$Sex[match(Patient_ID, TARGET_xena_can$Patient_ID)],\n                                                   TRUE ~ Sex))\n\n### update OS_Time\nTARGET_xena_can  &lt;-  TARGET_xena_pretreatment |&gt; \n                     filter(if_any(\"OS_Time\", ~ !filter_lose(.x))) \n\nTARGET_info_match2 &lt;- TARGET_info_match1 |&gt;\n                      mutate(OS_Time = case_when(\n                                                   filter_lose(OS_Time) & Patient_ID %in% TARGET_xena_can$Patient_ID  & OS_Status %in% TARGET_xena_can$OS_Status ~  TARGET_xena_can$OS_Time[match(Patient_ID, TARGET_xena_can$Patient_ID)],\n                                                   TRUE ~ OS_Time))\n\n### update OS_Status\nTARGET_xena_can  &lt;-  TARGET_xena_pretreatment |&gt; \n                     filter(if_any(\"OS_Status\", ~ !filter_lose(.x))) \n\nTARGET_info_after_match &lt;- TARGET_info_match2 |&gt;\n                            mutate(OS_Status = case_when(\n                                                   filter_lose(OS_Status) & Patient_ID %in% TARGET_xena_can$Patient_ID  & OS_Time %in% TARGET_xena_can$OS_Time ~  TARGET_xena_can$OS_Status[match(Patient_ID, TARGET_xena_can$Patient_ID)],\n                                                   TRUE ~ OS_Status)) \n  \n### Use TARGET_sheet to perform a left join, ensuring that the Sample_ID is correct.\nTARGET_info_after_match &lt;- TARGET_info_after_match |&gt; select(- Sample_ID)\nTARGET_correct      &lt;- TARGET_pretreatment |&gt;\n                       left_join(TARGET_info_after_match, by = c(\"Patient_ID\" = \"Patient_ID\")) |&gt;\n                       mutate(Run = Sample_ID)\n\n### Replace the cohort column values with Project_ID where the row is TARGET-Unkown.\n### TARGET_correct$project_id |&gt; unique()\n### [1] \"TARGET-AML\" \"TARGET-NBL\"\nTARGET_correct_after_pro &lt;- TARGET_correct  %&gt;%\n  mutate(\n    cohort = case_when(\n             cohort == \"TARGET-Unkown\" ~ Project_id,\n             TRUE ~ cohort),\n    cohort = case_when(\n             cohort == \"TARGET-AML\" ~ \"TARGET-LAML\",\n             TRUE ~ cohort)\n  ) \n\n### Divide a part of data into a group based on whether the Sample_type is cell\n\ntarget_cell &lt;- TARGET_correct_after_pro |&gt; filter(`Sample_type` == \"Cell Lines\")\ntarget_cell_sample &lt;- target_cell$Sample_ID |&gt; unique()\ntarget_cell_patient &lt;- target_cell$Patient_ID |&gt; unique()\n### target_cell_sample\n### [1] \"TARGET-20-MUTZ3-50A\"         \"TARGET-20-ML1-50A\"           \"TARGET-20-MV411D1-50A\"       \"TARGET-20-KasumiD1-50A\"    \"TARGET-20-HEK293-50A\"      \"TARGET-20-MOLM14CBFGLIS-50A\"     \n### [7] \"TARGET-20-TF1-50A\"           \"TARGET-20-IGROV1-50A\"        \"TARGET-20-CMS-50A\"           \"TARGET-20-WSUAML-50A\"      \"TARGET-20-KasumiAZAD5-50A\" \"TARGET-20-KasumiAZAD11-50A\"\n### [13]\"TARGET-20-REH-50A\"           \"TARGET-20-MV411AZAD11-50A\"   \"TARGET-20-MV411AZAD5-50A\"    \"TARGET-20-THP1-50A\"        \"TARGET-20-OCIAML2-50A\"     \"TARGET-20-HL60-50A\"  \n### target_cell_patient\n### [1] \"TARGET-20-MUTZ3\"         \"TARGET-20-ML1\"           \"TARGET-20-MV411D1\"       \"TARGET-20-KasumiD1\"      \"TARGET-20-HEK293\"        \"TARGET-20-MOLM14CBFGLIS\"\n### [7] \"TARGET-20-TF1\"           \"TARGET-20-IGROV1\"        \"TARGET-20-CMS\"           \"TARGET-20-WSUAML\"        \"TARGET-20-KasumiAZAD5\"   \"TARGET-20-KasumiAZAD11\" \n### [13]\"TARGET-20-REH\"           \"TARGET-20-MV411AZAD11\"   \"TARGET-20-MV411AZAD5\"    \"TARGET-20-THP1\"          \"TARGET-20-OCIAML2\"       \"TARGET-20-HL60\"  \n### reference : https://www.cellosaurus.org/\n### MUTZ3：Acute myeloid leukemia\n### ML1：    Adult acute myeloid leukemia\n### MV411D1：biphenotypic B-myelomonocytic leukemia\n### KasumiD1：Acute myeloblastic leukemia\n### TF1：Acute erythroid leukemia \n### IGROV1： Ovarian endometrioid adenocarcinoma\n### WSUAML：Acute myeloid leukemia。\n### KasumiAZAD5：can't find, so KasumiD1：Acute myeloblastic leukemia\n### KasumiAZAD11：can't find, so KasumiD1：Acute myeloblastic leukemia\n### REH：Childhood B acute lymphoblastic leukemia\n### MV411AZAD11：can't find, so MV411D1：biphenotypic B-myelomonocytic leukemia\n### MV411AZAD5：can't find, so MV411D1：biphenotypic B-myelomonocytic leukemia\n### THP1：Childhood acute monocytic leukemia\n### OCIAML2：Adult acute myeloid leukemia\n### HL60：Adult acute myeloid leukemia\n### HEK293：Vaccine production cell line.\n### CML：Childhood acute megakaryoblastic leukemia\n### MOLM14CBFGLIS：can't find, so MOLM14：Adult acute myeloid leukemia\ncell_data &lt;- metafusion[metafusion$Sample_ID %in% target_cell_sample]\n### &gt; nrow(cell_data)\n###  [1] 1853\ncell_info &lt;- TARGET_info_pretreatment[TARGET_info_pretreatment$Patient_ID %in% target_cell_patient]\n###  nrow(cell_info)\n###  [1] 18\n### no os.etc\ncell_info2 &lt;- TARGET_xena_pretreatment[TARGET_xena_pretreatment$Patient_ID %in% target_cell_patient]\n### nrow(cell_info2)\n### [1] 0\n\nTARGET_info_after_cell &lt;- TARGET_correct_after_pro |&gt;\n  mutate(cohort = case_when(\n    `Sample_type` %in% \"Cell Lines\" ~ \"TARGET-CELL\",\n    TRUE ~ cohort  \n  ))\n\n### The criteria for distinguishing normal samples based on Sample_type column in the TARGET databases are as follows:\nTARGET_info_after_cell$Sample_type |&gt; unique()\n### [1] \"Primary Blood Derived Cancer - Bone Marrow\"              \"Recurrent Blood Derived Cancer - Bone Marrow\"           \n### [3] \"Blood Derived Normal\"                                    \"Primary Blood Derived Cancer - Peripheral Blood\"        \n### [5] \"Bone Marrow Normal\"                                      \"Cell Lines\"                                             \n### [7] \"Next Generation Cancer Model\"                            \"Blood Derived Cancer - Bone Marrow, Post-treatment\"     \n### [9] \"Primary Tumor\"                                           \"Recurrent Tumor\"                                        \n### [11] \"Recurrent Blood Derived Cancer - Peripheral Blood\"       \"Blood Derived Cancer - Peripheral Blood, Post-treatment\"\n### \n### If the sample type is \"Blood Derived Normal\" or \"Bone Marrow Normal\", then it is a normal sample. Otherwise, it is a tumor sample.\nTARGET_info_after_normal &lt;- TARGET_info_after_cell |&gt;\n  mutate(cohort = case_when(\n    `Sample_type` %in% c(\"Blood Derived Normal\", \"Bone Marrow Normal\") ~ \"TARGET-NORMAL\",\n    TRUE ~ cohort  \n  ))\n\n### Adjust the column order.\nnew_order &lt;- c(\"Patient_ID\", \"Sample_ID\", \"Run\", \"Sample_type\", \"Age\", \"Sex\", \"race\", \"Cancer\", \n               \"OS_Time\", \"OS_Status\", \"Project_id\", \"cohort\")\n\nTARGET_info_after_processing &lt;- TARGET_info_after_normal |&gt;\n                                select(all_of(new_order)) \n\n### make sure nrow is same between Before and After Processing. \nTARGET_pretreatment |&gt; nrow()\n### [1]  3222\nTARGET_info_after_processing |&gt; nrow() \n### [1] 3222\n\n### make sure IOBR/TME data just contain sample which target_sheet gave. \ndetected_id_TARGET &lt;- TARGET_info_after_processing$Run\n\n### save info\ncohorts &lt;- unique(TARGET_info_after_processing$cohort)\n\nfor (cohort1 in cohorts) {\n  cohort_data &lt;- subset(TARGET_info_after_processing, cohort == cohort1)\n  name &lt;- gsub(\"-\", \"_\", cohort1)\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/Clininfo/\", name ,\"_info.tsv\")\n  fwrite(cohort_data , file = file_name, sep = \"\\t\")  \n}\n\n##Gene\nmetafusion1 &lt;- metafusion |&gt; \n  mutate(\n    cohort = case_when(\n      Sample_ID %in% TARGET_info_after_processing$Run & grepl(\"TARGET\", cohort) ~ TARGET_info_after_processing$cohort[match(Sample_ID, TARGET_info_after_processing$Run)],\n      TRUE ~ cohort\n    )\n  )  \n  cp_file_name1 &lt;- \"/home/data2/Projects/Fusion/fusiondb_v3/metafusion_calls_matched.cptac.target.tsv\"\n  fwrite(metafusion1, file = cp_file_name1, sep = \"\\t\") \n\n##TME\nNBL_TME &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/TARGET-NBL_TME.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"TARGET-NBL\")\nAML_TME &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/TARGET-AML_TME.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"TARGET-AML\")\nTARGET_TME &lt;- rbind(NBL_TME,AML_TME) |&gt;\n              mutate(dash_count = str_count(ID, \"-\"))\n### Manually check and delete composite samples from the info dataset.(TARGET-30-PAPTFZ-01A-01R-TARGET-30-PAPEAV-01A-01R)\nTARGET_TME |&gt; \nfilter(dash_count == 9) |&gt; \nselect(ID) |&gt;\nunique()\n### 1: TARGET-30-PASYPX-01A-01R-TARGET-30-PAIXIF-01A-01R\n### 2: TARGET-30-PANKFE-01A-01R-TARGET-30-PAPUAR-01A-01R\n### 3: TARGET-30-PANUKV-01A-01R-TARGET-30-PASUML-01A-01R\n### 4: TARGET-30-PAPTFZ-01A-01R-TARGET-30-PAPEAV-01A-01R\n\nTARGET_TME_pretreatment &lt;- TARGET_TME |&gt;\n                           filter(dash_count != 9) |&gt;\n                           select(-dash_count)\n\n### Filter TARGET Replicate Samples\n### The filter rule following broad institute says:\n###\n### In many instances there is more than one aliquot for a given combination of individual, platform, and data type. However, only one aliquot may be ingested into Firehose. Therefore, a set of precedence rules are applied to select the most scientifically advantageous one among them. Two filters are applied to achieve this aim: an Analyte Replicate Filter and a Sort Replicate Filter.\n### \n### Analyte Replicate Filter\n### The following precedence rules are applied when the aliquots have differing analytes. For RNA aliquots, T analytes are dropped in preference to H and R analytes, since T is the inferior extraction protocol. If H and R are encountered, H is the chosen analyte. This is somewhat arbitrary and subject to change, since it is not clear at present whether H or R is the better protocol. If there are multiple aliquots associated with the chosen RNA analyte, the aliquot with the later plate number is chosen. For DNA aliquots, D analytes (native DNA) are preferred over G, W, or X (whole-genome amplified) analytes, unless the G, W, or X analyte sample has a higher plate number.\n### \n### Sort Replicate Filter\n### The following precedence rules are applied when the analyte filter still produces more than one sample. The sort filter chooses the aliquot with the highest lexicographical sort value, to ensure that the barcode with the highest portion and/or plate number is selected when all other barcode fields are identical.\n### \n### Ref Link: &lt;https://confluence.broadinstitute.org/display/GDAC/FAQ#FAQ-sampleTypesQWhatTCGAsampletypesareFirehosepipelinesexecutedupon&gt;\n###           &lt;https://gist.github.com/ShixiangWang/33b2f9b49b77eaa8f773b428480f9101&gt;\nTARGET_TME_after_replicate &lt;- TARGET_TME_pretreatment |&gt;\n                              mutate(\n                              prefixes = str_remove(ID, \"-[^-]+$\"),  \n                              suffixes = str_extract(ID, \"[^-]+$\"), \n                              second_chars = str_extract(suffixes, \"[0-9]+\"),\n                              second_chars = as.integer(second_chars)) |&gt;\n                              group_by(prefixes) |&gt;\n                              slice(which.max(second_chars)) |&gt;\n                              ungroup() |&gt;\n                              mutate(ID = prefixes) |&gt; \n                              filter(ID %in% detected_id_TARGET)  |&gt; ### Ensure that all IDs in the TME data can be found in the TARGET info data. \n                              select(-c(prefixes,suffixes,second_chars))\n\n### Using TARGET info data cohort column to annotate TARGET TME data \ncohort_data   &lt;- TARGET_info_after_processing |&gt; \n                 select(Run, cohort)   |&gt;\n                 unique()   \n\nTARGET_TME_after_cohort &lt;- TARGET_TME_after_replicate |&gt;\n                           mutate(Run = ID)  |&gt;\n                           left_join(cohort_data, by = \"Run\")  |&gt;\n                           select(-Run)\n\n### save TME\ncohorts_TME &lt;- unique(TARGET_TME_after_cohort$cohort)\n\nfor (cohort1 in cohorts_TME) {\n  cohort_data &lt;- subset(TARGET_TME_after_cohort, cohort == cohort1) |&gt; select(-cohort)\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/IOBR/\", cohort1 ,\"_TME.tsv.gz\")\n  write.table(cohort_data, \n              file = gzfile(file_name), \n              sep = \"\\t\", \n              row.names = FALSE, \n              quote = FALSE) \n}  \n\n## IOBR\nNBL_IOBR_signature &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/TARGET-NBL_IOBR_signature.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"TARGET-NBL\")\nAML_IOBR_signature &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/TARGET-AML_IOBR_signature.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"TARGET-AML\")\nTARGET_IOBR &lt;- rbind(NBL_IOBR_signature,AML_IOBR_signature) |&gt;\n               mutate(dash_count = str_count(ID, \"-\"))\n\n### Manually check and delete composite samples from the info dataset.(TARGET-30-PAPTFZ-01A-01R-TARGET-30-PAPEAV-01A-01R)\nTARGET_IOBR |&gt; \nfilter(dash_count == 9) |&gt; \nselect(ID) |&gt;\nunique()\n### 1: TARGET-30-PASYPX-01A-01R-TARGET-30-PAIXIF-01A-01R\n### 2: TARGET-30-PANKFE-01A-01R-TARGET-30-PAPUAR-01A-01R\n### 3: TARGET-30-PANUKV-01A-01R-TARGET-30-PASUML-01A-01R\n### 4: TARGET-30-PAPTFZ-01A-01R-TARGET-30-PAPEAV-01A-01R\n\nTARGET_IOBR_pretreatment &lt;- TARGET_IOBR |&gt;\n                            filter(dash_count != 9) |&gt;\n                            select(-dash_count)\n\nTARGET_IOBR_after_replicate &lt;- TARGET_IOBR_pretreatment |&gt;\n                            mutate(\n                            prefixes = str_remove(ID, \"-[^-]+$\"),  \n                            suffixes = str_extract(ID, \"[^-]+$\"), \n                            second_chars = str_extract(suffixes, \"[0-9]+\"),\n                            second_chars = as.integer(second_chars)) |&gt;\n                            group_by(prefixes) |&gt;\n                            slice(which.max(second_chars)) |&gt;\n                            ungroup() |&gt;\n                            mutate(ID = prefixes) |&gt; \n                            filter(ID %in% detected_id_TARGET)  |&gt; ### Ensure that all IDs in the TME data can be found in the TARGET info data. \n                            select(-c(prefixes,suffixes,second_chars))\n\n### Using TARGET info data cohort column to annotate TARGET TME data \ncohort_data   &lt;- TARGET_info_after_processing |&gt; \n                 select(Run, cohort)   |&gt;\n                 unique()   \n\nTARGET_IOBR_after_cohort &lt;- TARGET_IOBR_after_replicate |&gt;\n                            mutate(Run = ID)  |&gt;\n                            left_join(cohort_data, by = \"Run\")  |&gt;\n                            select(-Run)\n### save IOBR\ncohorts_IOBR &lt;- unique(TARGET_IOBR_after_cohort$cohort)\n\nfor (cohort1 in cohorts_IOBR) {\n  cohort_data &lt;- subset(TARGET_IOBR_after_cohort, cohort == cohort1) |&gt; select(-cohort)\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/IOBR/\", cohort1 ,\"_IOBR_signature.tsv.gz\")\n  write.table(cohort_data, \n              file = gzfile(file_name), \n              sep = \"\\t\", \n              row.names = FALSE, \n              quote = FALSE) \n}  \n\n\n\nCPTAC\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\n\nfile_meta &lt;- \"/home/data2/Projects/Fusion/fusiondb_v3/metafusion_calls_matched.tsv\"\nmetafusion &lt;- fread(file_meta, sep = \"\\t\")\n\n# CPTAC\n## info\nCPTAC_sheet &lt;- fread(\"/home/data2/Projects/Fusion/unclean/CPTAC_gdc_sample_sheet.2023-11-15.tsv\", sep = \"\\t\")\n\n### Composite Sample \n###\n### Composite Sample use comma to separate like C3L-03400-05, C3L-03400-02\n### \n### It leads one question is whether these composite samples using comma to separate from identical patient?\nrows_with_comma &lt;- grepl(\", \", CPTAC_sheet$`Sample ID`)\nrows_with_comma_data &lt;- CPTAC_sheet[rows_with_comma, ]\n\ncheck_same_chars &lt;- function(x) {\n  parts &lt;- unlist(strsplit(x, \", \"))\n  return(parts[1] == parts[2])\n}\nsame_chars &lt;- sapply(rows_with_comma_data$`Case ID`, check_same_chars)\nif (all(same_chars)) {\n  cat(\"TRUE\\n\")\n} else {\n  cat(\"FALSE\\n\")\n}\n### They are from identical patient.\n\n### For the TARGET databases, check whether there is any overlap between composite and normal Sample_ID in the info data. If there is an overlap, retain only the normal Sample_ID. \ncheck_cptac_overlap &lt;- CPTAC_sheet |&gt;  \n                       select(c(`Case ID`, `Sample ID`, `Sample Type`, `Project ID`)) |&gt;\n                       unique() |&gt; \n                       separate_rows(`Sample ID`, sep = \",\\\\s*\") \n \ncheck_cptac_overlap &lt;- check_cptac_overlap |&gt;\n                        mutate(Sample_Type = ifelse(grepl(\", \", `Sample ID`), \"Composite\", \"Normal\"))\n                      \noverlap_samples &lt;- check_cptac_overlap |&gt;\n                        group_by(`Sample ID`) |&gt;\n                        summarise(Count = n(), .groups = 'drop') |&gt;\n                        filter(Count &gt; 1)\n### &gt; overlap_samples \n### A tibble: 0 × 2\n### ℹ 2 variables: Sample ID &lt;chr&gt;, Count &lt;int&gt; \n### no this situation\n\n### Due to the less rigorous patient naming conventions(like 604) in the CPTAC2 project, check for any overlapping patient names between CPTAC2 and CPTAC3.\nCPTAC_sheet_rigorous  &lt;- CPTAC_sheet |&gt; \n                         select(c(`Case ID`, `Sample ID`, `Sample Type`, `Project ID`)) |&gt;  \n                         unique() \nduplicates &lt;- CPTAC_sheet_rigorous |&gt;\n                          group_by(`Case ID`, `Sample ID`) |&gt;\n                          summarise(n_projects = n(), projects = paste(`Project ID`, collapse = \", \")) |&gt;\n                          filter(n_projects &gt; 1)\n### nrow(duplicates)\n### [1] 0\n### no same patient names between CPTAC2 and CPTAC3\n\n### CPTAC_sheet pretreatment\nmatched_CPTAC_pretreatment &lt;- CPTAC_sheet |&gt; \n  select(c(`Case ID`, `Sample ID`, `Sample Type`, `Project ID`)) |&gt;\n  rename(\"Patient_ID\" = `Case ID`,\n         \"Sample_ID\" = `Sample ID`,\n         \"Sample_type\"  =  `Sample Type`,\n         \"Project_id\" = `Project ID`) |&gt; \n  separate_rows(Patient_ID, sep = \",\\\\s*\") |&gt;  #because they are from identical patient.\n  unique() \n\n### CPTAC_info pretreatment\nCPTAC_info &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/Clininfo/CPTAC_info.tsv\", sep = \"\\t\")\n# &gt; CPTAC_info$Cancer |&gt; unique()\n# [1] \"BRCA\"       \"CCRCC\"      \"COAD\"       \"GBM\"        \"HGSC\"       \"HNSCC\"      \"LSCC\"       \"LUAD\"       \"PDAC\"       \"UCEC\"       \"GTEX-Brain\"\n### We use our naming standard mutate a new column cohort.\ncptac_replacement_table2 &lt;- c(\n  \"BRCA\" = \"CPTAC-BRCA\",\n  \"CCRCC\" = \"CPTAC-KIRC\",\n  \"COAD\" =  \"CPTAC-COAD\",\n  \"GBM\" = \"CPTAC-GBM\",\n  \"HGSC\" = \"CPTAC-HGSC\",\n  \"HNSCC\" = \"CPTAC-HNSC\",\n  \"LSCC\" = \"CPTAC-LUSC\" ,\n  \"LUAD\" = \"CPTAC-LUAD\",\n  \"PDAC\" = \"CPTAC-PDAC\",\n  \"UCEC\" = \"CPTAC-UCEC\",\n  \"GTEX-Brain\" = \"CPTAC-GTEX-Brain\"\n)     \n\nmatched_CPTAC_info &lt;- CPTAC_info$Cancer %in% names(cptac_replacement_table2)\nCPTAC_info_pretreatment &lt;- CPTAC_info %&gt;%\n  mutate(cohort = case_when(\n    matched_CPTAC_info ~ cptac_replacement_table2[Cancer],\n    TRUE ~ as.character(NA)  \n  )) |&gt; \n  select(-Sample_ID)\n### CPTAC_info_pretreatment  |&gt; filter(is.na(cohort)) |&gt; nrow()\n### [1] 0\n\nmatched_CPTAC &lt;- matched_CPTAC_pretreatment |&gt;\n                 left_join(CPTAC_info_pretreatment, by = c(\"Patient_ID\" = \"Patient_ID\")) |&gt;\n                 mutate(Run = str_replace_all(Sample_ID, \", \", \"-\"))\n\n### CPTAC Sample type\n### matched_CPTAC_pretreatment$Sample_type |&gt; unique()\n### [1] \"Primary Tumor\"                                                             \"Solid Tissue Normal\"                                                      \n### [3] \"Primary Tumor, Primary Tumor\"                                              \"Primary Tumor, Primary Tumor, Primary Tumor\"                              \n### [5] \"Solid Tissue Normal, Solid Tissue Normal, Solid Tissue Normal\"             \"Solid Tissue Normal, Solid Tissue Normal\"                                 \n### [7] \"Primary Tumor, Primary Tumor, Primary Tumor, Primary Tumor, Primary Tumor\" \"Primary Tumor, Primary Tumor, Primary Tumor, Primary Tumor\"   \n### \n### Just two sample type so if grepling \"Solid Tissue Normal\" is normal sample, grepling \"Primary Tumor\" is tumor sample\nmatched_CPTAC_after_processing &lt;- matched_CPTAC |&gt;\n  mutate(cohort = case_when(\n    grepl(\"Solid Tissue Normal\", Sample_type) ~ \"CPTAC-NORMAL\",\n    TRUE ~ cohort  \n  )) \n\n### make sure nrow is same between Before and After Processing. \nmatched_CPTAC_after_processing |&gt; nrow()\n### [1] 2558\nmatched_CPTAC_pretreatment |&gt; nrow() \n### [1] 2558\n\n### make sure IOBR/TME data just contain sample which cptac_sheet gave. \ndetected_id_CPTAC &lt;- matched_CPTAC_after_processing$Run |&gt; unique()\n\n### save info\ncohorts &lt;- unique(matched_CPTAC_after_processing$cohort)\n\nfor (cohort1 in cohorts) {\n  cohort_data &lt;- subset(matched_CPTAC_after_processing, cohort == cohort1)\n  name &lt;- gsub(\"-\", \"_\", cohort1)\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/Clininfo/\", name ,\"_info.tsv\")\n  fwrite(cohort_data , file = file_name, sep = \"\\t\")  \n}\n\n## TME\nCPTAC2_TME &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/CPTAC-2_TME.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"CPTAC2\")\nCPTAC3_TME &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/CPTAC-3_TME.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"CPTAC3\")\nCPTAC_TME &lt;- rbind(CPTAC2_TME, CPTAC3_TME)\n\n### Match matched_CPTAC_after_processing$Run to CPTAC_TME$ID\n### \n### CPTAC_TME can match\nmatched_can &lt;- CPTAC_TME %&gt;%\n               filter(ID %in% matched_CPTAC_after_processing$Run) \n\n### \n### CPTAC_TME can't match\nmatched_not &lt;- CPTAC_TME %&gt;%\n               filter(!(ID %in% matched_CPTAC_after_processing$Run))\n\n### \n### situtation 1: Due to the barcode naming convention and etc, some portion character are added to the endning of the IOBR/TME sample name.\n### str_count(matched_last$ID, \"_\")\n### [1] 1 2 0\n### 1.1 \"CPT000817-0008\" and \"CPT000817\". If the value of str_count(matched_last$ID, \"_\") for a row is 0, then the value of the prefixes column for that row should be the characters before the last -, and the value of the suffixes column should be the characters after the last -.\n### 1.2 \"f6a7f764-2495-4a1d-89a2-e12f51_D7_1\" and \"f6a7f764-2495-4a1d-89a2-e12f51\". If the value of str_count(matched_last$ID, \"_\") for a row is 1, then the value of the prefixes column for that row should be the characters before the first _, and the value of the suffixes column should be the characters after the first _.\n### 1.3 \"CPT008756_0001\" and \"CPT008756\". f6a7f764-2495-4a1d-89a2-e12f51_D7_1, .If the value of str_count(matched_last$ID, \"_\") for a row is 2, then the value of the prefixes column for that row should be the characters before the first _, and the value of the suffixes column should be the characters after the first _.\n\nmatched_not &lt;- matched_not %&gt;%\n  rowwise() %&gt;%  \n  mutate(\n    prefixes = case_when(\n      str_count(ID, \"_\") == 0 ~ str_split(ID, \"-\")[[1]][1],  \n      str_count(ID, \"_\") == 1 ~ str_split(ID, \"_\")[[1]][1],  \n      str_count(ID, \"_\") == 2 ~ str_split(ID, \"_\")[[1]][1],  \n      TRUE ~ NA_character_\n    ),\n    suffixes = case_when(\n      str_count(ID, \"_\") == 0 ~ str_split(ID, \"-\")[[1]][length(str_split(ID, \"-\")[[1]])],  \n      str_count(ID, \"_\") == 1 ~ str_split(ID, \"_\")[[1]][2],  \n      str_count(ID, \"_\") == 2 ~ str_split(ID, \"_\")[[1]][2],  \n      TRUE ~ NA_character_\n    ),\n    name1 = prefixes\n  ) %&gt;%\n  ungroup() \n\n### situtation 1 after processing can match\nmatched_in_situtation1 &lt;-  matched_not %&gt;%\n                           filter((name1 %in% matched_CPTAC_after_processing$Run))%&gt;%\n                           mutate(ID = name1)  %&gt;%\n                           select(-c(suffixes,prefixes,name1) )     \nmatched_can &lt;- rbind(matched_can, matched_in_situtation1)\n\n### not in situtation 1 \nmatched_not_situtation1 &lt;- matched_not %&gt;%\n                           filter(!(name1 %in% matched_CPTAC_after_processing$Run))\n\n### situtation 2: Due to IOBR package analyze code, an additional \"X\" is added to the beginning of the IOBR/TME sample name.\n### \"X1104806\" and \"1104806\", \"X9f905736-f662-41d6-b3ac-16758d\" and \"9f905736-f662-41d6-b3ac-16758d\". \nmatched_not_situtation1  &lt;- matched_not_situtation1 %&gt;%\n                            mutate(name2 = str_remove(ID, \"^X\"))  \n\n### situtation 2 after processing can match\nmatched_in_situtation2 &lt;- matched_not_situtation1 %&gt;%\n                          filter((name2 %in% matched_CPTAC_after_processing$Run))    %&gt;%\n                          mutate(ID = name2 )  %&gt;%\n                          select(-c(name1,prefixes,suffixes,name2)) \nmatched_can &lt;- rbind(matched_can, matched_in_situtation2)\n\n### situtation 2 after processing can't match\nmatched_not_situtation2 &lt;- matched_not_situtation1 %&gt;%\n                           filter(!(name2 %in% matched_CPTAC_after_processing$Run))\n\n### situtation 3: Mixed situation1 and situation2.\n### X161317f3-1a39-438e-af45-cd2502_D7 and 161317f3-1a39-438e-af45-cd2502\nmatched_not_situtation2  &lt;- matched_not_situtation2 %&gt;%\n                            mutate(name3 = str_remove(prefixes, \"^X\")) \n\n### situtation 3 after processing can match    \nmatched_in_situtation3 &lt;- matched_not_situtation2  %&gt;%\n                          filter((name3 %in% matched_CPTAC_after_processing$Run))  %&gt;%\n                          mutate(ID = name3) %&gt;%\n                          select(-c(name1,name2,prefixes,suffixes, name3))           \nmatched_can &lt;- rbind(matched_can, matched_in_situtation3)\n\n### situtation 3 after processing can't match\nmatched_not_situtation3 &lt;- matched_not_situtation2  %&gt;%\n                           filter(!(name3 %in% matched_CPTAC_after_processing$Run))\nnrow(matched_not_situtation3 )\n### [1] 81\n\n### Check the reason why it still can't match after Type 3 processing\n### After manual review, these Sample_ID are not included in either the info dataset or the gdc_sheet.\n\n### Check if CPTAC TME data ID are any samples that have been divided into multiple portions.\nmatched_can |&gt; select(ID) |&gt;  nrow()\n### [1] 2558\nmatched_can |&gt; select(ID) |&gt;  unique() |&gt; nrow()\n### [1] 2558\n### No this situation.\n\n### Check if CPTAC TME data has same norw with CPTAC info data.\nmatched_can |&gt; select(ID) |&gt;   unique() |&gt; nrow()\n### [1] 2558\nmatched_CPTAC_after_processing |&gt; select(Run) |&gt;  unique() |&gt; nrow()\n### [1] 2558\n### Sure.\n\ncohort_data &lt;- matched_CPTAC_after_processing |&gt; \n               select(Run, cohort)   |&gt;\n               unique()   \n\nmatched_can &lt;- matched_can  |&gt;\n               mutate(Run = ID)  |&gt;\n               left_join(cohort_data, by = \"Run\")  |&gt;\n               select(-Run)\n\ncohorts_TME &lt;- unique(matched_can$cohort)\n\nfor (cohort1 in cohorts_TME) {\n  cohort_data &lt;- subset(matched_can, cohort == cohort1) |&gt; select(-cohort)\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/IOBR/\", cohort1 ,\"_TME.tsv.gz\")\n  write.table(cohort_data, \n              file = gzfile(file_name), \n              sep = \"\\t\", \n              row.names = FALSE, \n              quote = FALSE) \n}  \n\n#IOBR\nCPTAC2_Signature &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/CPTAC-2_IOBR_signature.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"CPTAC2\")\nCPTAC3_Signature &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/IOBR/CPTAC-3_IOBR_signature.tsv.gz\", sep = \"\\t\") |&gt; mutate(Project_id = \"CPTAC3\")\nCPTAC_Signature &lt;- rbind(CPTAC2_Signature, CPTAC3_Signature)\n\n### Match matched_CPTAC_after_processing$Run to CPTAC_TME$ID\n### \n### CPTAC_TME can match\nmatched_can &lt;- CPTAC_Signature %&gt;%\n               filter(ID %in% matched_CPTAC_after_processing$Run) \n\n\n### \n### CPTAC_TME can't match\nmatched_not &lt;-  CPTAC_Signature %&gt;%\n                filter(!(ID %in% matched_CPTAC_after_processing$Run))\n\n### \n### situtation 1:like TME \nmatched_not &lt;- matched_not %&gt;%\n  rowwise() %&gt;%  \n  mutate(\n    prefixes = case_when(\n      str_count(ID, \"_\") == 0 ~ str_split(ID, \"-\")[[1]][1],  \n      str_count(ID, \"_\") == 1 ~ str_split(ID, \"_\")[[1]][1],  \n      str_count(ID, \"_\") == 2 ~ str_split(ID, \"_\")[[1]][1], \n      TRUE ~ NA_character_\n    ),\n    suffixes = case_when(\n      str_count(ID, \"_\") == 0 ~ str_split(ID, \"-\")[[1]][length(str_split(ID, \"-\")[[1]])],  \n      str_count(ID, \"_\") == 1 ~ str_split(ID, \"_\")[[1]][2],  \n      str_count(ID, \"_\") == 2 ~ str_split(ID, \"_\")[[1]][2],  \n      TRUE ~ NA_character_\n    ),\n    name1 = prefixes\n  ) %&gt;%\n  ungroup()  \n\n### situtation 1 after processing can match\nmatched_in_situtation1 &lt;- matched_not %&gt;%\n                          filter((name1 %in% matched_CPTAC_after_processing$Run))%&gt;%\n                          mutate(ID = name1)  %&gt;%\n                          select(-c(suffixes,prefixes,name1) )    \n\nmatched_can &lt;- rbind(matched_can, matched_in_situtation1)\n\n### situtation 1 after processing can't match\nmatched_not_situtation1 &lt;- matched_not %&gt;%\n                           filter(!(name1 %in% matched_CPTAC_after_processing$Run))\n\n### situtation 2:like TME \nmatched_not_situtation1  &lt;- matched_not_situtation1 %&gt;%\n                            mutate(name2 = str_remove(ID, \"^X\"))  \n\n### situtation 2 after processing can match\nmatched_in_situtation2 &lt;- matched_not_situtation1 %&gt;%\n                          filter((name2 %in% matched_CPTAC_after_processing$Run))    %&gt;%\n                          mutate(ID = name2 )  %&gt;%\n                          select(-c(name1,prefixes,suffixes,name2)) \n\nmatched_can &lt;- rbind(matched_can, matched_in_situtation2)\n\n### situtation 2 after processing can't match\nmatched_not_situtation2 &lt;- matched_not_situtation1 %&gt;%\n                           filter(!(name2 %in% matched_CPTAC_after_processing$Run))\n\n### situtation 3:like TME \nmatched_not_situtation2   &lt;- matched_not_situtation2  %&gt;%\n                             mutate(name3 = str_remove(prefixes, \"^X\")) \n\n### situtation 3 after processing can match   \nmatched_in_situtation3 &lt;- matched_not_situtation2  %&gt;%\n                          filter((name3 %in% matched_CPTAC_after_processing$Run))  %&gt;%\n                          mutate(ID = name3) %&gt;%\n                          select(-c(name1,name2,prefixes,suffixes, name3))     \n\nmatched_can &lt;- rbind(matched_can, matched_in_situtation3)\n\n### situtation 3 after processing can't match  \nmatched_not_situtation3 &lt;- matched_not_situtation2  %&gt;%\n                           filter(!(name3 %in% matched_CPTAC_after_processing$Run))\n\nnrow(matched_not_situtation3 )\n### [1] 81\n                          \n### Check the reason why it still can't match after Type 3 processing\n### After manual review, these Sample_ID are not included in either the info dataset or the gdc_sheet.\n\n### Check if CPTAC IOBR data ID are any samples that have been divided into multiple portions.\nmatched_can |&gt; select(ID) |&gt;  nrow()\n### [1] 2558\nmatched_can |&gt; select(ID) |&gt;  unique() |&gt; nrow()\n### [1] 2558\n### No this situation.\n\n### Check if CPTAC IOBR data has same norw with CPTAC info data.\nmatched_can |&gt; select(ID) |&gt;   unique() |&gt; nrow()\n### [1] 2558\nmatched_CPTAC_after_processing |&gt; select(Run) |&gt;  unique() |&gt; nrow()\n### [1] 2558\n### Sure.\n\ncohort_data   &lt;- matched_CPTAC_after_processing |&gt; \n                 select(Run, cohort)   |&gt;\n                 unique()   \n\nmatched_can &lt;- matched_can |&gt;\n               mutate(Run = ID)  |&gt;\n               left_join(cohort_data, by = \"Run\")  |&gt;\n               select(-Run)\n\ncohorts_IOBR &lt;- unique(matched_can$cohort)\n\nfor (cohort1 in cohorts_IOBR) {\n  cohort_data &lt;- subset(matched_can, cohort == cohort1) |&gt; select(-cohort)\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/IOBR/\", cohort1 ,\"_IOBR_signature.tsv.gz\")\n  write.table(cohort_data, \n              file = gzfile(file_name), \n              sep = \"\\t\", \n              row.names = FALSE, \n              quote = FALSE) \n}  \n \n## Gene\n\nmetafusion1 &lt;- metafusion |&gt; \n  mutate(\n    cohort = case_when(\n      Sample_ID %in% matched_CPTAC_after_processing$Run  & grepl(\"CPTAC\", cohort) ~ matched_CPTAC_after_processing$cohort[match(Sample_ID, matched_CPTAC_after_processing$Run)],\n      TRUE ~ cohort\n    )\n  )  \n\n### In the past, the metafusion file had an issue with the sample_type being incorrectly labeled.\n### After further investigation, it was found that only the composite Sample_ID in CPTAC had this issue, where samples labeled as 'Normal' were mistakenly identified as 'Tumor' in the sample_type column.\n\nnormal_id &lt;-   matched_CPTAC_after_processing |&gt; \n               filter(cohort == \"CPTAC-NORMAL\") |&gt; \n               select(Run) |&gt;\n               unique() |&gt;\n               pull(Run)\n\nmeta_normal &lt;- metafusion1 |&gt;\n               filter(Sample_ID %in% normal_id)\n\nunique(meta_normal$sample_type)\n#[1] \"Normal\" \"Tumor\" \n\nmeta_processing  &lt;- metafusion1 |&gt;\n                    mutate(\n                      sample_type = ifelse(\n                        sample_type != \"Normal\" & Sample_ID %in% normal_id,\n                        \"Normal\",\n                        sample_type\n                      )\n                    )\n\ncp_file_name1 &lt;- \"/home/data2/Projects/Fusion/fusiondb_v3/metafusion_calls_matched.cptac.tsv\"\nfwrite(meta_processing, file = cp_file_name1, sep = \"\\t\") \n\n\nTCGA\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\nfile_meta &lt;- \"/home/data2/Projects/Fusion/fusiondb_v3/metafusion_calls_matched.cptac.target.tsv\"\nmetafusion &lt;- fread(file_meta  , sep = \"\\t\")\n\n# TCGA\n## info\nTCGA_info &lt;- fread(\"/home/data2/Projects/Fusion/fusiondb/Clininfo/TCGA_info.tsv\", sep = \"\\t\")\n### TCGA_sheet pretreatment\nTCGA_sheet &lt;- fread(\"/home/data2/Projects/Fusion/unclean/TCGA_sample_sheet.2024-05-14.tsv\", sep = \"\\t\") |&gt; \n              select(c(`Sample ID`, `Sample Type`,`Project ID`)) \n\ncolnames(TCGA_sheet) &lt;- c(\"Sample_ID\", \"Sample_type\",\"Project_id\")\n\nTCGA_sheet_pretreatment &lt;- TCGA_sheet  |&gt;\n                           mutate(Sample_ID = substr(Sample_ID, 1, 15)) |&gt; \n                           unique()\n### We use our naming standard mutate a new column cohort. \nTCGA_after_processing &lt;- TCGA_sheet_pretreatment |&gt;\n  left_join(TCGA_info, by = c(\"Sample_ID\" = \"Sample_ID\")) |&gt;\n  mutate(\n    cohort = Project_id,\n    Run = Sample_ID,\n    Patient_ID = substr(Sample_ID, 1, 12),  \n  )\n### TCGA Sample type\n### TCGA_after_processing$Sample_type |&gt; unique()\n###   [1] \"Primary Tumor\"                                   \"Solid Tissue Normal\"                             \"Metastatic\"                                     \n###   [4] \"Additional - New Primary\"                        \"Primary Blood Derived Cancer - Peripheral Blood\" \"Additional Metastatic\"                          \n###   [7] \"Recurrent Tumor\"   \n### \n### \"Solid Tissue Normal\" is normal sample, others is tumor sample\n\nTCGA_NORMAL &lt;- TCGA_after_processing |&gt; \n               filter(Sample_type == \"Solid Tissue Normal\") \n\nNORMAL_id &lt;- TCGA_NORMAL$Run |&gt; unique()\n\nTCGA_after_processing &lt;- TCGA_after_processing |&gt; \n  mutate(\n    Project_id = cohort,\n    cohort = case_when(\n      Run %in% NORMAL_id ~ \"TCGA-NORMAL\",\n      TRUE ~ cohort)) \n\n### make sure nrow is same between Before and After Processing. \nTCGA_after_processing |&gt; nrow()\n### [1] 10545\nTCGA_sheet_pretreatment |&gt; nrow() \n### [1] 10545\n\n### make sure IOBR/TME data just contain sample which tcga_sheet gave. \ndetected_id_TCGA &lt;- TCGA_after_processing$Run |&gt; unique()\n\n### save info\ncohorts &lt;- unique(TCGA_after_processing$cohort)\n\nfile_name1 &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/Clininfo/\")\n\nfor (cohort1 in cohorts) {\n  cohort_data &lt;- subset(TCGA_after_processing, cohort == cohort1)\n  name &lt;- gsub(\"-\", \"_\", cohort1)\n  file_name &lt;- paste0(file_name1, name ,\"_info.tsv\")\n  fwrite(cohort_data , file = file_name, sep = \"\\t\")  \n}  \n## Gene\nmetafusion1 &lt;- metafusion |&gt; \n  mutate(\n    cohort = case_when(\n      Sample_ID %in% TCGA_after_processing$Run & grepl(\"TCGA\", cohort) ~ TCGA_after_processing$cohort[match(Sample_ID, TCGA_after_processing$Run)],\n      TRUE ~ cohort\n    )\n  ) \ncp_file_name1 &lt;- \"/home/data2/Projects/Fusion/fusiondb_v3/metafusion_gdc_divide.tsv\"\nfwrite(metafusion1, file = cp_file_name1, sep = \"\\t\") \n\n## IOBR\nfolder_path &lt;- \"/home/data2/Projects/Fusion/fusiondb/IOBR\"\n\nfile_pattern &lt;- \"^TCGA.*_IOBR_signature.tsv.gz$\"\nfile_list &lt;- list.files(path = folder_path, pattern = file_pattern, full.names = TRUE)\n\ncombined_data &lt;- data.table()\n\nfor (file in file_list) {\n  \n  file_data &lt;- fread(file, sep = \"\\t\")\n  file_name &lt;- basename(file)  \n  project_id &lt;- sub(\"^(TCGA-[^_]+).*\", \"\\\\1\", file_name)  \n  file_data &lt;- file_data %&gt;%\n               mutate(Project_id = project_id)\n  combined_data &lt;- rbind(combined_data, file_data)\n}\n\n### Filter TCGA Replicate Samples\n### The filter rule following broad institute says:\n###\n### In many instances there is more than one aliquot for a given combination of individual, platform, and data type. However, only one aliquot may be ingested into Firehose. Therefore, a set of precedence rules are applied to select the most scientifically advantageous one among them. Two filters are applied to achieve this aim: an Analyte Replicate Filter and a Sort Replicate Filter.\n### \n### Analyte Replicate Filter\n### The following precedence rules are applied when the aliquots have differing analytes. For RNA aliquots, T analytes are dropped in preference to H and R analytes, since T is the inferior extraction protocol. If H and R are encountered, H is the chosen analyte. This is somewhat arbitrary and subject to change, since it is not clear at present whether H or R is the better protocol. If there are multiple aliquots associated with the chosen RNA analyte, the aliquot with the later plate number is chosen. For DNA aliquots, D analytes (native DNA) are preferred over G, W, or X (whole-genome amplified) analytes, unless the G, W, or X analyte sample has a higher plate number.\n### \n### Sort Replicate Filter\n### The following precedence rules are applied when the analyte filter still produces more than one sample. The sort filter chooses the aliquot with the highest lexicographical sort value, to ensure that the barcode with the highest portion and/or plate number is selected when all other barcode fields are identical.\n### \n### Ref Link: &lt;https://confluence.broadinstitute.org/display/GDAC/FAQ#FAQ-sampleTypesQWhatTCGAsampletypesareFirehosepipelinesexecutedupon&gt;\n###           &lt;https://gist.github.com/ShixiangWang/33b2f9b49b77eaa8f773b428480f9101&gt;\n\n\nresult_data &lt;- combined_data |&gt;\n  mutate(\n    prefixes = str_split(ID, \"-\", simplify = TRUE)[, 1:4] %&gt;% apply(1, paste, collapse = \"-\"),\n    suffixes = str_split(ID, \"-\", simplify = TRUE)[, 5],\n    second_chars = str_extract(suffixes, \"[0-9]+\"),\n    second_chars = as.integer(second_chars))\nresult_IOBR &lt;- result_data  |&gt;\n  group_by(prefixes) |&gt;\n  slice(which.max(second_chars)) |&gt;\n  ungroup() |&gt;\n  mutate(cohort = Project_id,\n         ID = substr(prefixes, 1, 15),\n         cohort = case_when(ID %in% NORMAL_id ~ \"TCGA-NORMAL\",\n                            TRUE ~ cohort)\n  ) |&gt;\n  filter(ID %in% detected_id_TCGA)  |&gt; \n  select(-c(\"suffixes\", \"second_chars\",\"prefixes\")) |&gt;\n  unique() \n\ncohorts_IOBR &lt;- unique(result_IOBR$cohort)\n\nfor (cohort1 in cohorts_IOBR) {\n  cohort_data &lt;- subset(result_IOBR, cohort == cohort1) |&gt; select(-c(cohort,Project_id) )\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/IOBR/\", cohort1 ,\"_IOBR_signature.tsv.gz\")\n  write.table(cohort_data, \n              file = gzfile(file_name), \n              sep = \"\\t\", \n              row.names = FALSE, \n              quote = FALSE) \n}  \n\n## TME\n\nfolder_path &lt;- \"/home/data2/Projects/Fusion/fusiondb/IOBR\"\nfile_pattern &lt;- \"^TCGA.*_TME.tsv.gz$\"\nfile_list &lt;- list.files(path = folder_path, pattern = file_pattern, full.names = TRUE)\n\ncombined_data1 &lt;- data.table()\n\nfor (file in file_list) {\n\n  file_data &lt;- fread(file, sep = \"\\t\")\n  \n  file_name &lt;- basename(file)  \n  project_id &lt;- sub(\"^(TCGA-[^_]+).*\", \"\\\\1\", file_name)  \n  \n  file_data &lt;- file_data %&gt;%\n    mutate(Project_id = project_id)\n  \n  combined_data1 &lt;- rbind(combined_data1, file_data)\n}\n\nresult_data1 &lt;- combined_data1 |&gt;\n  mutate(\n    prefixes = str_split(ID, \"-\", simplify = TRUE)[, 1:4] %&gt;% apply(1, paste, collapse = \"-\"),\n    suffixes = str_split(ID, \"-\", simplify = TRUE)[, 5],\n    second_chars = str_extract(suffixes, \"[0-9]+\"),\n    second_chars = as.integer(second_chars))\nresult_TME &lt;- result_data1  |&gt;\n  group_by(prefixes) |&gt;\n  slice(which.max(second_chars)) |&gt;\n    ungroup() |&gt;\n      mutate(cohort = Project_id,\n             ID = substr(prefixes, 1, 15),\n             cohort = case_when(ID %in% NORMAL_id ~ \"TCGA-NORMAL\",\n                                TRUE ~ cohort)\n      ) |&gt;\n      filter(ID %in% detected_id_TCGA)  |&gt; \n      select(-c(\"suffixes\", \"second_chars\",\"prefixes\")) |&gt;\n      unique() \n\ncohorts_TME &lt;- unique(result_TME$cohort)\n\nfor (cohort1 in cohorts_TME) {\n  cohort_data &lt;- subset(result_TME, cohort == cohort1) |&gt; select(-c(cohort,Project_id) )\n  file_name &lt;- paste0(\"/home/data2/Projects/Fusion/fusiondb_v3/IOBR/\", cohort1 ,\"_TME.tsv.gz\")\n  write.table(cohort_data, \n              file = gzfile(file_name), \n              sep = \"\\t\", \n              row.names = FALSE, \n              quote = FALSE) \n}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "All the processed data can be accessed on the ImmunoFusion website. We collected ICB-related cancer data sets with tumor gene expression profiles from the dbGaP, EGA, EMBL-EBI and GSA databases. Following the accession instruction described in published ICB studies (table on the “Repository” page), we downloaded ICB patients’ RNA-Seq raw sequencing data, clinical information, and response outcome information from ICB studies (if available). Curated circRNA identification results are available at Zenodo (https://zenodo.org/doi/10.5281/zenodo.7969298). For requesting circRNA expression matrix or other types of data, please contact the leader, Jian-Guo Zhou."
  },
  {
    "objectID": "about.html#data-availability",
    "href": "about.html#data-availability",
    "title": "About",
    "section": "",
    "text": "All the processed data can be accessed on the ImmunoFusion website. We collected ICB-related cancer data sets with tumor gene expression profiles from the dbGaP, EGA, EMBL-EBI and GSA databases. Following the accession instruction described in published ICB studies (table on the “Repository” page), we downloaded ICB patients’ RNA-Seq raw sequencing data, clinical information, and response outcome information from ICB studies (if available). Curated circRNA identification results are available at Zenodo (https://zenodo.org/doi/10.5281/zenodo.7969298). For requesting circRNA expression matrix or other types of data, please contact the leader, Jian-Guo Zhou."
  },
  {
    "objectID": "about.html#citation",
    "href": "about.html#citation",
    "title": "About",
    "section": "Citation",
    "text": "Citation\nThe database is currently under submission for publication."
  },
  {
    "objectID": "about.html#contact",
    "href": "about.html#contact",
    "title": "About",
    "section": "Contact",
    "text": "Contact\nIf you find any bug or have any feature to request, please report it by email (Yankun Zhao mailto:23happytea@gmail.com, Shixiang Wang mailto:shixiang1994wang@gmail.com, Jianguo Zhou mailto:jianguo.zhou@zmu.edu.cn)."
  },
  {
    "objectID": "about.html#team",
    "href": "about.html#team",
    "title": "About",
    "section": "Team",
    "text": "Team\nOncoHarmony Network is a dynamic collaborative platform dedicated to advancing the frontier of cancer immunotherapy. Bringing together diverse teams from leading universities and research institutions, our network is committed to the exploration, mining, and integration of multi-omics data in the realm of cancer research. With a focus on fostering synergy among experts in the field, OncoHarmony Network aims to construct a comprehensive resource hub and cutting-edge tools for unraveling the complexities of tumor-immune interactions. Through collective knowledge and interdisciplinary collaboration, we strive to accelerate breakthroughs in the understanding and development of effective cancer therapies.\nCurrently led by Dr. Shixiang Wang and Dr. Jian-Guo Zhou.\nMore please visit our website."
  }
]